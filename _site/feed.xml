<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joswlv</title>
    <description></description>
    <link>http://joswlv.github.io/</link>
    <atom:link href="http://joswlv.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Feb 2017 22:12:22 +0900</pubDate>
    <lastBuildDate>Mon, 13 Feb 2017 22:12:22 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>RDBMS vs NOSQL</title>
        <description>&lt;h4 id=&quot;rdbms-nosql&quot;&gt;RDBMS? NOSQL?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 읽기 쓰기 등 퍼포먼스에 치중한다면 NOSQL, 트랜잭션과 같은 정합성 위주의 시스템을 사용한다면 RDBMS&lt;/li&gt;
  &lt;li&gt;RDBMS 컬럼 변경 용이하지 않음, NOSQL 컬럼 변경 용이&lt;/li&gt;
  &lt;li&gt;NOSQL의 경우 sorting, join, grouping, range query, index 매우 취약&lt;/li&gt;
  &lt;li&gt;RDBMS 학습 비용 x&lt;/li&gt;
  &lt;li&gt;NOSQL 학습 비용 소요 (운영시 어떤 장애상황이 생길지 예측이 어려움)&lt;/li&gt;
  &lt;li&gt;NOSQL 가장 큰 장점 (Scale-Out, RDBMS보다 상대적으로 빠른 쓰기/읽기)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOSQL 분류&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[ 키 밸류형 ] redis, memcached, Oracle Coherence&lt;/p&gt;

&lt;p&gt;[ 컬럼형   ] Cassandra, HBASE, Cloud Datastore&lt;/p&gt;

&lt;p&gt;[ 문서형   ] MongoDB, Couchbase, MarkLogic, PostgreSQL, MySQL, DynamoDB MS-DocumentDB&lt;/p&gt;

&lt;p&gt;[ 그래프형  ] Neo4j&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;DataStore&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;설 명&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;장 점&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;단 점&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cassandra&lt;/td&gt;
      &lt;td&gt;- Facebook에 의해 2008년 아파치 오픈소스로 공개된 분산 데이터 베이스 (자바 언어 기반)&lt;br /&gt; - 컬럼 단위로 관리되어 컬럼형으로 분류&lt;br /&gt; - 대용량의 데이터 트랜잭션에 대해 고성능 처리가 가능(실제 트위터 MYSQL -&amp;gt; Cassandra로 전환)&lt;/td&gt;
      &lt;td&gt;- 대량으로 쓰기가 발생하는 서비스에 좋음&lt;br /&gt; - 확장성이 뛰어남&lt;br /&gt; - Apache Foundation에서 개발중이며커뮤니티 활발&lt;br /&gt; - Scale-Out&lt;/td&gt;
      &lt;td&gt;- 최소 3대 이상 구성(클러스터 환경)&lt;br /&gt; - 복잡한 조건 검색 불가&lt;br /&gt; - 데이터 갱신 및 입력시 Atomic한 처리가 힘듬&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HBase&lt;/td&gt;
      &lt;td&gt;- 대량 데이터를 우수한 성능으로 데이터 일관성을 보장하면서 다뤄야 할 때 주로 사용&lt;br /&gt; - 대량 데이터 분석 및 처리를 위해 사용되는 Hadoop의 산하 프로젝트로 시작된 데이터베이스 (HDFS 및 MapReduce등과 함께 사용하기에 최적화) &lt;br /&gt; - 수십 테러바이트가 넘는 빅데이터에 적합&lt;/td&gt;
      &lt;td&gt;- 하둡 기반에서 동작하고 다양한 하둡 의 도구들과 상호 운영성이 좋음&lt;br /&gt; - 데이터 일관성 보장 우수(상대적)&lt;/td&gt;
      &lt;td&gt;- 5대 미만에서는 사용할 수 없다(대규모 전용)&lt;br /&gt; - 성능이 좋진 않다 (상대적)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MongoDB&lt;/td&gt;
      &lt;td&gt;- MongoDB는 10gen 사에서 개발된 높은 성능과 확장성을 가지고 있는 데이터베이스&lt;br /&gt; - NoSQL 데이터베이스에서는 문서형 데이터베이스로 분류(C언어 기반)&lt;br /&gt; - 데이터를 입력할때 데이터 구조 정보를 포함하여 BSON(JSON을 바이너리화한것)형식으로 저장하고, key value로 사용&lt;br /&gt; - NON-SCHEMA&lt;br /&gt; -비정형 데이터, 파일 데이터등의 스키마프리(Scheme free)모델에서 적합&lt;br /&gt; - SQL 과 비슷한 방식의 쿼리 사용&lt;/td&gt;
      &lt;td&gt;- 스키마 없이 사용 가능 &lt;br /&gt; - SQL 과 비슷한 방식의 쿼리 사용&lt;br /&gt; - 몽고는 쓰기할때 메모리에 먼저 Write 후에 1분 단위로 Flushing하는 Write back 방식을 사용한기 때문에 write성능이 좋음&lt;br /&gt; - Read시에는 파일의 Index를 메모리에 로딩해   놓고 찾는다(memory mapped file) &lt;br /&gt; - 빠름&lt;br /&gt; - 다양한 기능 제공&lt;br /&gt;&lt;/td&gt;
      &lt;td&gt;- JOIN이나 트랜잭션 처리가 불가능&lt;br /&gt; - 디스크에 쓰기가 비동기식으로 이루어진다. 때문에 경우에 따라 데이터가 유실될 가능성도 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;cassandra--hbase-&quot;&gt;[ Cassandra &amp;amp; HBase ]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;카산드라 클러스터 설정 및 구성이 HBase 클러스터 구성보다 훨씬 쉽다.&lt;/li&gt;
  &lt;li&gt;카산드라가 일반적으로 write시 5배 이상의 더 나은 성능, read시 4배 이상의 성능을 보인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cassandra--mongodb-&quot;&gt;[ Cassandra &amp;amp; MongoDB ]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Cassandra 노드가 추가될수록 MonogoDB 보다 훨씬 나은 선형적인 성능 향상을 보인다.&lt;/li&gt;
  &lt;li&gt;다중 Index가 필요한 구조라면 MongoDB를 선택하고, 데이터 항목 변경이 많고 unique access가 많은 경우라면 Cassandra가 적합&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://db-engines.com/en/system/Cassandra;MongoDB&quot;&gt;http://db-engines.com/en/system/Cassandra;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;성능비교&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://academy.datastax.com/planet-cassandra/nosql-performance-benchmarks&quot;&gt;https://academy.datastax.com/planet-cassandra/nosql-performance-benchmarks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.datastax.com/nosql-databases/benchmarks-cassandra-vs-mongodb-vs-hbase&quot;&gt;https://www.datastax.com/nosql-databases/benchmarks-cassandra-vs-mongodb-vs-hbase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 10:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/02/13/rdmsvsnosql/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/02/13/rdmsvsnosql/</guid>
        
        
        <category>BigData</category>
        
      </item>
    
      <item>
        <title>Stored Procedure으로 Insert</title>
        <description>&lt;h1 id=&quot;mysql-stored-procedure-insert&quot;&gt;MySQL Stored Procedure으로 Insert&lt;/h1&gt;

&lt;p&gt;쿼리테스트를 위한 테스트 데이터 1000만건을 insert을 해야한다. 이런 미션을 해결하기 위해 procedure를 사용했다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 저장 프로시저란?&lt;/h2&gt;

&lt;p&gt;여러 SQL문을 하나의 SQL문 처럼 정리하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL procedure명&lt;/code&gt;라는 명령어로 실행할 수 있게 만든 것을 저장프로시저(Stored Procedure)라고 한다.&lt;/p&gt;

&lt;p&gt;저장프로시저는 MySQL버전 5.0이상에서 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;no-using-transaction&quot;&gt;2. 첫번째 시도! (no using TRANSACTION)&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILL_RATE_TEST_DATA&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
		
	&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Y%m%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQ_CNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x2011'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELIMITER&lt;/code&gt;는 저장프로시저에서 구분문자를 &lt;code class=&quot;highlighter-rouge&quot;&gt;세미콜론(;)&lt;/code&gt;이 아닌 다른 문자로 변경해준다. 위의 예에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;을 사용했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;90만건을 insert를 하는 데 &lt;code class=&quot;highlighter-rouge&quot;&gt;236s&lt;/code&gt;을 기다려야한다.&lt;/p&gt;

&lt;h2 id=&quot;using-transaction&quot;&gt;3. 두번째 시도(using TRANSACTION)&lt;/h2&gt;

&lt;p&gt;다음으로 시도한 방버은 쿼리실행을 &lt;code class=&quot;highlighter-rouge&quot;&gt;TRANSCATION&lt;/code&gt;안에 넣는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILL_RATE_TEST_DATA&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
	&lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
	&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Y%m%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQ_CNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x2011'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;START TRANSACTION&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;COMMIT;&lt;/code&gt;사이에 쿼리문을 넣어주면 된다.&lt;/p&gt;

&lt;p&gt;실행속도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;68s&lt;/code&gt; 거의 4배 빨라진 것을 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 더 나아가기&lt;/h2&gt;

&lt;p&gt;Procedure에서 cursor와 trigger 등을 응용 사용하는 법이 있다.&lt;/p&gt;

&lt;p&gt;다음 사이트를 참조하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://recoveryman.tistory.com/186&quot;&gt;저장 프로시저 활용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yookeun.github.io/database/2015/04/10/mysql-procedure/&quot;&gt;프로시저/커서사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bizadmin.tistory.com/entry/MySQL-Fetch-Cursor-%EB%AC%B8-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95&quot;&gt;프로시저/커서사용2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 08:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/01/09/mysqlprocedureinsert/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/01/09/mysqlprocedureinsert/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>Java String에 대해..</title>
        <description>&lt;h1 id=&quot;java-string&quot;&gt;Java String&lt;/h1&gt;

&lt;p&gt;우선 Java의 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 객체는 immutable(불변의) 클래스이다. 그래서 한번 생성되면 수정이 불가능 하다.&lt;/p&gt;

&lt;p&gt;다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;객체의 특성을 나열 한다.&lt;/p&gt;

&lt;h3 id=&quot;or--string-&quot;&gt;1. “” or 객체 String 만들기&lt;/h3&gt;

&lt;p&gt;String을 만들때는 두가지 방식이 존재한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;우선 차이를 설명하는 예를 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;는 Method Area에서 같은 메모리를 참조 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;는 다른 heap영역에서 다른 object이다. 다른 object는 다른 메모리 참조한다.&lt;/p&gt;

&lt;p&gt;String을 만들때 객체를 새로 만드는 것보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;으로 String을 만드는 것이 불필요한 객체를 안만들어서 더 유용하다고 한다.&lt;/p&gt;

&lt;h3 id=&quot;string-passed-by-value&quot;&gt;2. String은 passed by value&lt;/h3&gt;

&lt;p&gt;다음 예를 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 예제에서 print되는 것은 “abc”이다.&lt;/p&gt;

&lt;p&gt;이러한 이유는 Java는 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;pass by value&lt;/code&gt;를 하기 때문이다. 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeText()&lt;/code&gt;메소드를 지나면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;에 저장되었던 “abc”는 무시되고 “cd”가 새롭게 heap생성이된다. 처음에 생성되었던 a는 여전히 “abc”를 참조하고 있다. 이는 앞서 설명한 Java에서는 String이 immutable한 클래스이기 때문이다. 즉 참조에 의한 값전달(passed by reference)는 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;immutable하지 않는 String을 만들고 싶으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;다음 예는 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeText()&lt;/code&gt;메소드의 기능을 살리는 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;여기서 StringBuilder는 값이 변할 수 있다. 그리고 새로운 객체를 생성하는 것이 아니라 새로운 값을 할당한다.&lt;/p&gt;

&lt;p&gt;요약하면 Java는 값(변수?)의한 전달만 가능하다!! 참조를 통한 전달은 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;C++로 &lt;code class=&quot;highlighter-rouge&quot;&gt;passed by reference&lt;/code&gt;의 예를 보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;최종적인 x는 “cd”가 출력된다. heap에 생성된 x의 메모리주소를 참조하여 값을 변경하였다.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/&quot;&gt;programcreek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javadude.com/articles/passbyvalue.htm&quot;&gt;JavaDude.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fowler.egloos.com/1243657&quot;&gt;어제보다 나은 오늘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 10:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/01/05/javastring/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/01/05/javastring/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>curl</title>
        <description>&lt;h1 id=&quot;curl----http-getpost-rest-api&quot;&gt;curl 설치 및 사용법 (HTTP GET/POST REST API)&lt;/h1&gt;

&lt;h3 id=&quot;section&quot;&gt;개요&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;은 command line용 data transfer tool이다. download/upload 모두 가능하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/HTTPS/FTP/LDAP/SCP/TELNET/SMTP/POP3&lt;/code&gt; 등 주요한 프로토콜을 지원하며 Linux/Unix 계열 및 Windows 등 주요한 OS 에서 구동되므로
여러 플랫폼과 OS에서 유용하게 사용할 수 있다. 또 libcurl 이라는 C 기반의 library 가 제공되므로 C/C++ 프로그램 개발시 위의 protocol 과 연계가 필요하다면 libcurl 을 사용하여 손쉽게 연계할 수 있다. 또 libcurl은 PHP, ruby, PERL 및 여러 언어에 바인딩되어 있으므로 사용하는 언어나 개발환경에 맞게 libcurl 을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;설치&lt;/h3&gt;

&lt;p&gt;Linux나 Mac OS X 에는 기본 탑재되어 있다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo brew install curl&lt;/code&gt;로 설치하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;사용법&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl [options...] &amp;lt;url&amp;gt;&lt;/code&gt;형식으로 사용하면 된다.&lt;/p&gt;

&lt;p&gt;option 처리는 GNU getopt를 사용하므로 하이픈(-)하나를 붙이는 short형식의 옵션과 하이픈두개(–)두개로 시작되는 long 형식의 options이 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;short&lt;/th&gt;
      &lt;th&gt;long&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;–verbose &lt;/td&gt;
      &lt;td&gt;동작하면서 자세한 옵션을 출력한다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;–silent&lt;/td&gt;
      &lt;td&gt;정숙 모드. 진행 내역이나 메시지등을 출력하지 않는다. -o 옵션으로 remote data 도 /dev/null 로 보내면 결과물도 출력되지 않는다&lt;/td&gt;
      &lt;td&gt;HTTP response code 만 가져오거나 할 경우 유리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o&lt;/td&gt;
      &lt;td&gt;–output FILE&lt;/td&gt;
      &lt;td&gt;curl 은 remote 에서 받아온 데이타를 기본적으로는 콘솔에 출력한다. -o 옵션 뒤에 FILE 을 적어주면 해당 FILE 로 저장한다. (download 시 유용)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-O&lt;/td&gt;
      &lt;td&gt;–remote-name&lt;/td&gt;
      &lt;td&gt;file 저장시 remote 의 file 이름으로 저장한다. -o 옵션보다 편리하다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-l&lt;/td&gt;
      &lt;td&gt;–head&lt;/td&gt;
      &lt;td&gt;HTTP header 만 보여주고 content 는 표시하지 않는다&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-L&lt;/td&gt;
      &lt;td&gt;–location&lt;/td&gt;
      &lt;td&gt;서버에서 &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_301&quot;&gt;HTTP 301 &lt;/a&gt;이나 &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_302&quot;&gt;HTTP 302&lt;/a&gt; 응답이 왔을 경우 redirection URL 로 따라간다.&lt;br /&gt;–max-redirs 뒤에 숫자로 redirection 을 몇 번 따라갈지 지정할 수 있다. 기본 값은 50이다&lt;/td&gt;
      &lt;td&gt;curl -v daum.net 을 실행하면 결과값으로 다음과 같이 HTTP 302 가 리턴된다.&lt;br /&gt;&amp;lt; HTTP/1.1 302 Object Moved&lt;br /&gt; Location: &lt;a href=&quot;http://www.daum.net/&quot;&gt;http://www.daum.net/&lt;/a&gt;&lt;br /&gt;-L 옵션을 추가하면 &lt;a href=&quot;http://www.daum.net/&quot;&gt;www.daum.net&lt;/a&gt; 으로 재접속하여 결과를 받아오게 된다.&amp;lt;/span&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-k&lt;/td&gt;
      &lt;td&gt;–insecure&lt;/td&gt;
      &lt;td&gt;https 사이트를 SSL certificate 검증없이 연결한다.&lt;/td&gt;
      &lt;td&gt;wget 의 –no-check-certificate 과 비슷한 역할 수행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-J&lt;/td&gt;
      &lt;td&gt;–remote-header-name&lt;/td&gt;
      &lt;td&gt;어떤 웹서비스는 파일 다운로드시 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html&quot;&gt;Content-Disposition Header&lt;/a&gt; 를 파싱해야 정확한 파일이름을 알 수 있을 경우가 있다. -J 옵션을 주면 헤더에 있는 파일 이름으로 저장한다.&lt;/td&gt;
      &lt;td&gt;curl 7.20 이상부터 추가된 옵션&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;–dump-header &amp;lt;file&amp;gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;file&amp;gt; 에 HTTP header 를 기록한다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;–data&lt;/td&gt;
      &lt;td&gt;HTTP Post data&lt;/td&gt;
      &lt;td&gt;FORM 을 POST 하는 HTTP나 JSON 으로 데이타를 주고받는 REST 기반의 웹서비스 디버깅시 유용한 옵션이다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-3&quot;&gt;사용예&lt;/h2&gt;

&lt;h3 id=&quot;httphttps-download&quot;&gt;HTTP/HTTPS Download&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다운로드 받은 파일을 콘솔로 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;지정한 이름으로 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o index.html http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;서버의 filename으로 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O  http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;여러 url에서 동시에 다운로드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O  http://www.gnu.org/software/bash/manual/html_node/index.html -O http://www.gnu.org/savannah-checkouts/gnu/libiconv/documentation/libiconv-1.13/iconv.1.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;이어받기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-C / --continue-at &amp;lt;offset&amp;gt;&lt;/code&gt; 
옵션을 주면 이어받기 가능 (offset에 - 를 주면 전송이후 부분부터 이어받음)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -C - -O  http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;특정일 이전/이후 변경되었으면 받기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-z / --time-cond &amp;lt;time&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HTTP 헤더에 If-Modified-Since: 헤더를 추가하여 특정일 이후에 변경되었으면 다운로드 수행
아래 예제는 2011년 12월 21일 &lt;strong&gt;이후에&lt;/strong&gt; 변경되었으면 다운로드 수행&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -z 21-Dec-11 http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;날자앞에 - 를 추가하면 If-Unmodified-Since: 헤더를 추가하여 특정일 이전에 변경되었으면 다운로드 수행
아래 예제는 2011년 12월 21일 &lt;strong&gt;이전에&lt;/strong&gt; 변경되었으면 다운로드함 (날자에 - 추가)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -z -21-Dec-11 http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-response-code-&quot;&gt;http response code만 출력&lt;/h3&gt;

&lt;p&gt;HTTP Header 나 contents 는 빼고 &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot;&gt;HTTP Response code&lt;/a&gt; 만 출력한다. 서버의 정상 작동 여부 점검때 유용하다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -o /dev/null -w &quot;%{http_code}\n&quot; http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP인증&lt;/h3&gt;

&lt;p&gt;id/pwd 가 필요한 사이트의 경우 -u(– user) 옵션 뒤에 userid:password 를 지정하여 인증할 수 있다&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -u userid:password http://www.example.com/user.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-header-&quot;&gt;결과값에 HTTP Header 포함&lt;/h3&gt;

&lt;p&gt;-i 옵션을 사용하면 서버의 응답에 서버가 보낸 HTTP 헤더를 추가하여 출력한다. 디버깅에 유용한다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -i https://api.github.com -u valid_username:valid_password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;httphttps-post&quot;&gt;HTTP/HTTPS POST&lt;/h3&gt;

&lt;p&gt;-X POST 옵션을 추가하거나 -d( –data) 옵션을 지정하면 기본값으로 POST 로 설정됨&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; OK &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;POST 데이타는 “param1=value1&amp;amp;param2=value2” 형식으로 전달&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d &quot;first_name=Bruce&amp;amp;last_name=Wayne&amp;amp;press=%20OK%20&quot; http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;데이타에 공백이나 기타 특수 문자가 있을 경우 URL encoding 을 해야 한다.
공백일 경우 일일이 + 로 변환해서 전송해야 하지만 최신 버전의 curl(7.18.0 이후) 은 FORM 파라미터를 URL Encoding 해주는 –data-urlencode 옵션을 사용하면 별도로 인코딩을 해주지 않아도 된다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --data-urlencode &quot;first_name=Bruce&quot; --data-urlencode &quot;last_name=Wayne&quot; --data-urlencode &quot;press= OK &quot; http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hidden field 전송시 일반 필드처럼 name=value 형식으로 전송하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;http-post-file&quot;&gt;HTTP POST File&lt;/h3&gt;

&lt;p&gt;file POST할 경우 file name 앞에 @ 를 붙여줌&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myPostfile http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-post-binary-file&quot;&gt;HTTP POST Binary File&lt;/h3&gt;

&lt;p&gt;curl 은 POST 시 데이타를 text 로 취급하므로 binary 데이타는 깨질 수 있다. 제대로 전송하려면 –data-binary 옵션을 추가해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --data-binary @myBinary.jpg http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-file-upload-form&quot;&gt;HTTP File Upload Form&lt;/h3&gt;

&lt;p&gt;다음과 같은 파일 업로드 FORM이 있을 때&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enctype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'multipart/form-data'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upload.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;localfilename은 upload 할 파일명, submit은 press=OK&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --form upload=@localfilename --form press=OK http://localhost/upload.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-header--1&quot;&gt;HTTP Header 설정&lt;/h3&gt;

&lt;p&gt;특정한 HTTP Header를 설정해서 보내야 할 경우(Ex: json data등) -H (–header) 옵션으로 헤더를 설정할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;content-type-header-&quot;&gt;Content-Type Header 설정&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;user-agent-&quot;&gt;User-Agent 설정&lt;/h4&gt;

&lt;p&gt;특정 브라우저인(Browser) 것처럼 동작하기 위해서는 -A ( –user-agent) 옵션을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;chrome-240-user-agent&quot;&gt;Chrome 24.0으로 User-Agent설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.14 (KHTML, like Gecko) Chrome/24.0.1292.0 Safari/537.14&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ie10-user-agnet&quot;&gt;IE10으로 User-Agnet설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;firefodx-290-user-agent-&quot;&gt;Firefodx 29.0으로 User-Agent 설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20120101 Firefox/29.0&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;referer&quot;&gt;Referer설정&lt;/h3&gt;

&lt;p&gt;Referer 를 체크하는 사이트일 경우 -e ( –referer) 옵션으로 Referer URL 을 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --referer http://www.example.come/from  http://www.example.com/to
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아니면 -H 옵션으로 referer 헤더를 지정해도 된다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -H &quot;Referer: http://www.example.come/from&quot;  http://www.example.com/to
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssltls&quot;&gt;SSL/TLS옵션&lt;/h3&gt;

&lt;h3 id=&quot;tls-version-&quot;&gt;TLS Version 지정&lt;/h3&gt;

&lt;p&gt;SSL의 후속 버전인 TLS의 버전을 지정할 수 있다. 지정하지 않을 경우 서버와 negotiation하여 결정한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-1, –tlsv1     Use =&amp;gt; TLSv1 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.0       Use TLSv1.0 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.1       Use TLSv1.1 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.2       Use TLSv1.2 (SSL)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --tlsv1.2 https://www.example.come
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssl-version-&quot;&gt;SSL Version 지정&lt;/h3&gt;

&lt;p&gt;다음 옵션으로 사용할 SSL 의 버전을 지정할 수 있다. 지정하지 않을 경우 서버와 negotiation하여 결정한다. SSL 은 오래 됐으니 SSL 보다는 TLS 를 사용하는게 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-2, –sslv2         Use SSLv2 (SSL)&lt;/li&gt;
  &lt;li&gt;-3, –sslv3         Use SSLv3 (SSL)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --sslv3 https://www.example.come
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/pages/viewpage.action?pageId=14745703#curl설치및사용법-HTTPGET/POST,RESTAPI연계등-curl로AtlassianJIRARESTAPI연계하기&quot;&gt;lesstif&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 11:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/18/curl/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/18/curl/</guid>
        
        
        <category>Etc</category>
        
      </item>
    
      <item>
        <title>GROUP_CONCAT</title>
        <description>&lt;h1 id=&quot;mysql-groupconcat-&quot;&gt;[MySQL] GROUP_CONCAT에 대해&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;은 서로 다른 결과를 한줄로 합쳐서 보여줘야 할 경우 사용하는 MySQL 명령어이다.&lt;/p&gt;

&lt;p&gt;이는 전체 결과를 서버로 들고와서 for문을 돌려 문자열을 붙여도 되지만 SELECT쿼리를 사용하여 합쳐져 있는 문자열을 받는게 더 편하다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;싼 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼집 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;이런 결과를 &lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;을 사용하면 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구,싼 가구,신혼집 가구,신혼부부 가구, 신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;의 기본적으로 문자열 사이에 쉼표(,)가 붙게 된다. 구분자를 변경하고 싶을 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SEPARATOR '구분자'&lt;/code&gt;를 함께 사용하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEPARATOR&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구/싼 가구/신혼집 가구/신혼부부 가구/ 신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;합쳐지는 문자열에 중복되는 문자열을 제거 할때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구,싼 가구,신혼집 가구,신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;문자열을 정렬하여 나타내고 싶으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;order by&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;MySQL에서 group by 로 문자열을 합칠땐 group_concat 을 이용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기본형 : group_concat(필드명)&lt;/li&gt;
  &lt;li&gt;구분자 변경 : group_concat(필드명 separator ‘구분자’)&lt;/li&gt;
  &lt;li&gt;중복제거 : group_concat(distinct 필드명)&lt;/li&gt;
  &lt;li&gt;문자열 정렬 : group_concat(필드명 order by 필드명)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;참고&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;AVG()&lt;/td&gt;
      &lt;td&gt;Return the average value of the argument&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_AND()&lt;/td&gt;
      &lt;td&gt;Return bitwise AND&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_OR()&lt;/td&gt;
      &lt;td&gt;Return bitwise OR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_XOR()&lt;/td&gt;
      &lt;td&gt;Return bitwise XOR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;COUNT()&lt;/td&gt;
      &lt;td&gt;Return a count of the number of rows returned&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;COUNT(DISTINCT)&lt;/td&gt;
      &lt;td&gt;Return the count of a number of different values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;GROUP_CONCAT()&lt;/td&gt;
      &lt;td&gt;Return a concatenated string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MAX()&lt;/td&gt;
      &lt;td&gt;Return the maximum value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MIN()&lt;/td&gt;
      &lt;td&gt;Return the minimum value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STD()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV_POP()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV_SAMP()&lt;/td&gt;
      &lt;td&gt;Return the sample standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SUM()&lt;/td&gt;
      &lt;td&gt;Return the sum&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VAR_POP()&lt;/td&gt;
      &lt;td&gt;Return the population standard variance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VAR_SAMP()&lt;/td&gt;
      &lt;td&gt;Return the sample variance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VARIANCE()&lt;/td&gt;
      &lt;td&gt;Return the population standard variance&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;표 : &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_avg&quot;&gt;MySQL_Doc&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;tip&quot;&gt;[tip]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;오라클의 경우 mysql의 group_concat을 아래와 같이 대체하여 사용이 가능하다.&lt;/li&gt;
  &lt;li&gt;오라클 10G : WM_CONCAT()&lt;/li&gt;
  &lt;li&gt;오라클 11G : LISTAGG()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fruitdev.tistory.com/16&quot;&gt;과일가게 개발자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blackbull.tistory.com/3&quot;&gt;음머어’s 까망별&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ra2kstar.tistory.com/56&quot;&gt;초보개발자 이야기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 10:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/18/groupconcat/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/18/groupconcat/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>TRUNCATE와 DELETE</title>
        <description>&lt;h1 id=&quot;truncate--delete&quot;&gt;TRUNCATE 와 DELETE&lt;/h1&gt;

&lt;h3 id=&quot;truncate&quot;&gt;TRUNCATE&lt;/h3&gt;

&lt;p&gt;테이블의 데이터를 삭제하는 DDL명령어 이다.&lt;/p&gt;

&lt;p&gt;데이터를 삭제 방식은 talbe의 명세만 남기고 &lt;strong&gt;DROP 후 CREATE&lt;/strong&gt;한다. 즉 데이터가 존재하던 공간마저 제거하기 위한 명령어이다.&lt;/p&gt;

&lt;p&gt;이런 방식으로 테이블의 데이터를 삭제하기 때문에 수행 속도는 DELETE보다 빠르지만, 데이터 복구가 불가능하다는 제한사항이 존재한다.&lt;/p&gt;

&lt;p&gt;또 auto_increment까지 초기화 시켜준다.(5.0.13버전부터) 즉 table의 옵션을 초기상태로 돌려준다.&lt;/p&gt;

&lt;p&gt;삭제하다가 외부키와의 의존관계 때문에 삭제할 수 없다는 메시지가 나오면 다음과 같이하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET foreign_key_checks = 0; 
truncate TABLE_NAME;
SET foreign_key_checks = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;0은 해제 1은 다시 설정을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;테이블의 데이터를 삭제하기 위한 명령어이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt;절을 통해 조건을 부여 할 수 있다.&lt;/p&gt;

&lt;p&gt;데이터 삭제 방식은 한줄씩 순차적으로 삭제한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 09:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/17/truncateanddelete/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/17/truncateanddelete/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>Flask + Nginx 설정</title>
        <description>&lt;h1 id=&quot;flask--nginx--&quot;&gt;Flask + Nginx 설치 방법&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;환경&lt;/h2&gt;
&lt;p&gt;데비안 계열 중 우분투 서버&lt;br /&gt;
여기서 접근하는 모든 디렉토리는 권한이 있어야함.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;설치&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install nginx # Nginx
apt-get install uwsgi # uWSGI
apt-get install uwsgi-plugin-python # python과 uWSGI를 연결하는 플러그인
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nginx-&quot;&gt;Nginx 세팅&lt;/h2&gt;
&lt;p&gt;디폴트 파일로 설정하는 방법
&lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/nginx/sites-available/default&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
       listen       80; # 연결할 포트
       server_name  0.0.0.0;
       location / { try_files $uri @app; }
       location @app {
           include uwsgi_params;
           uwsgi_pass unix:socket파일이 위치할 경로;
           # ex) /home/server/uwsgi.sock
       }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uwsgi-&quot;&gt;uWSGI 세팅&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/uwsgi/apps-available/uwsgi.ini&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[uwsgi]
chdir = 프로젝트 경로
uid = 실행할계정
gid = 실행할계정
chmod-socket = 666
socket = socket파일이 위치할 경로
module = 모듈이름(실행할 파일 이름)
callable = 연결될 Flask 모듈이름
virtualenv = python 가상 환경 경로(virtualenv)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참고로 프로젝트 경로는 root를 포함하지 않는 것이 좋다 (권한 문제 때문에)&lt;/p&gt;

&lt;p&gt;허용하는 파일로 등록하기위해 apps-enabled 디렉토리에 link함
&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /etc/uwsgi/apps-available/uwsgi.ini /etc/uwsgi/apps-enabled/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;실행 방법&lt;/h2&gt;
&lt;p&gt;세팅 후 재시작을 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx restart
sudo service uwsgi restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;설정한 uwsgi에 맞춰서 실행
&lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi /etc/uwsgi/apps-available/uwsgi.ini &amp;amp;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 15:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/27/flasnginxsetting/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/27/flasnginxsetting/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Real-time web tec List</title>
        <description>&lt;h1 id=&quot;real-time-web-tec-list&quot;&gt;Real-time web Tec List&lt;/h1&gt;

&lt;p&gt;You can find a comprehensive and updated list of real-time solutions that can be considered alternatives to pusher in this Real-Time Web Technologies Guide.&lt;/p&gt;

&lt;h3 id=&quot;hosted&quot;&gt;Hosted&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ably: https://www.ably.io   &lt;strong&gt;(완전 편리함!!)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Fanout: http://fanout.io/&lt;/li&gt;
  &lt;li&gt;Firebase https://www.firebase.com&lt;/li&gt;
  &lt;li&gt;Gamooga: http://www.gamooga.com/&lt;/li&gt;
  &lt;li&gt;Google App Engine with Channels API: http://code.google.com/appengine…&lt;/li&gt;
  &lt;li&gt;Google Drive Real Time: https://developers.google.com/dr…&lt;/li&gt;
  &lt;li&gt;Hydna: https://www.hydna.com/&lt;/li&gt;
  &lt;li&gt;ScaleDrone https://www.scaledrone.com&lt;/li&gt;
  &lt;li&gt;Baasil https://baasil.io&lt;/li&gt;
  &lt;li&gt;PubNub: http://pubnub.com&lt;/li&gt;
  &lt;li&gt;Reappt: Data-Efficient Realtime Messaging&lt;/li&gt;
  &lt;li&gt;Simperium: Simperium&lt;/li&gt;
  &lt;li&gt;Tambur: https://www.tambur.io/&lt;/li&gt;
  &lt;li&gt;WebSync on-demand: http://www.frozenmountain.com/we…&lt;/li&gt;
  &lt;li&gt;Xtremepush: Xtremepush - Mobile Marketing Automation Software&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;self-hosted&quot;&gt;Self Hosted&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://github.com/Atmosphere : http://async-io.org/&lt;/li&gt;
  &lt;li&gt;http://faye.jcoglan.com/&lt;/li&gt;
  &lt;li&gt;http://firehose.io/&lt;/li&gt;
  &lt;li&gt;Jetty: http://blogs.webtide.com/gregw/e…&lt;/li&gt;
  &lt;li&gt;Kaazing: http://kaazing.com/&lt;/li&gt;
  &lt;li&gt;Lightstreamer: http://lightstreamer.com&lt;/li&gt;
  &lt;li&gt;Diffusion - http://www.pushtechnology.com&lt;/li&gt;
  &lt;li&gt;http://pusheo.com&lt;/li&gt;
  &lt;li&gt;http://code.google.com/p/pywebso…&lt;/li&gt;
  &lt;li&gt;Ruby EventMachine WebSocket server: https://github.com/igrigorik/em-…&lt;/li&gt;
  &lt;li&gt;SignalR (.NET) https://github.com/SignalR/SignalR&lt;/li&gt;
  &lt;li&gt;Slanger. Open source reimplementation of Pusher. Compatible with Pusher libraries: https://github.com/stevegraham/s…&lt;/li&gt;
  &lt;li&gt;http://socky.org/&lt;/li&gt;
  &lt;li&gt;http://socket.io/&lt;/li&gt;
  &lt;li&gt;http://sockjs.org/&lt;/li&gt;
  &lt;li&gt;http://socketcluster.io/&lt;/li&gt;
  &lt;li&gt;Thunderpush: https://github.com/thunderpush/t…&lt;/li&gt;
  &lt;li&gt;https://www.meteor.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pushpin&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MigratoryData: http://migratorydata.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-alternatives-to-pusher-com&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Nov 2016 08:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/20/realtimeweb/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/20/realtimeweb/</guid>
        
        
        <category>Etc</category>
        
      </item>
    
      <item>
        <title>Short-circuit evaluation</title>
        <description>&lt;h1 id=&quot;short-circuit-evaluation&quot;&gt;Short-circuit evaluation이란&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;논리 연산에서 인자 하나만 보고 결과를 확실히 알 수 있을 때, 뒤에 나오는 인자를 확인하지 않고 바로 답을 내는 방법이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 연산일 때, 하나라도 false이면 무조건 답이 false이고 &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; 연산일 땐, 하나라도 true이면 무조건 답이 true이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;지원하는 언어는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-circuit_evaluation#Support_in_common_programming_languages&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;예를 보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;조건식 1 &amp;amp;&amp;amp; 조건식 2
조건식 1 이 false 이면, 조건식 2 를 건너뜀
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;설명&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;연산자에서는 두 조건식이 모두 true가 되어야 전체 결과가 true가 되는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;조건식1&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;가되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;조건식2&lt;/code&gt;을 보지 않아도 전체가 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;가 되므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;조건식2&lt;/code&gt;를 체크하지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;적용한 예&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;blabla&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 경우에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt;을 먼저 체크하는 것보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;인 경우를 먼저 체크하는 것이 안전하다고 한다.&lt;/p&gt;

&lt;p&gt;수정하면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;blabla&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ohyecloudy.com/pnotes/archives/542/&quot;&gt;ohyecloudy pnotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kkikkodev.tistory.com/284&quot;&gt;kkikkodev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Nov 2016 15:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/18/Shortcircuitevaluation/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/18/Shortcircuitevaluation/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>jquery 선택자</title>
        <description>&lt;h1 id=&quot;jquery-&quot;&gt;JQuery 노드찾기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;노드 찾기&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;태그 이름으로 노드 찾기 :  $(“태그이름”),   $(“선택자”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스 이름으로 노드 찾기 : $(“.클래스이름”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ID로 노드 찾기 : $(“선택자”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;속성으로 노드 찾기 : $(“[속성이름=값]”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;찾은 요소 개수 구하기 :  .size()    ,     .length&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;찾은 요소 n번째 접근하기 : .eq(index)    ,    .each(function(index){});&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;찾은 요소에서 특정요소만을 걸러내기 : .filter(“선택자”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;찾은 요소에서 특정 자식요소만 찾기 :  .find(“선택자”)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;자식 노드 찾기&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;전체 자식 노드 찾기&lt;/p&gt;

 	- 텍스트 노드 포함 전체 자식 노드 찾기 :  $(“선택자”).contents()

 	- 텍스트 노드 제외한 전체 자식 노드 찾기 : $(“선택자”).children(“선택자”)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;n번째 자식 노드 접근&lt;/p&gt;

 	- $(“선택자”).children().eq(N)

 	- $(“선택자”).children(“:eq(N)”)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;첫번째 자식 노드 접근&lt;/p&gt;

 	- $(“선택자”).children().first()

 	- $(“선택자”).children(“:first”)

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	- $(&quot;선택자&quot;).children().eq(0)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

 	- $(“선택자”).children(“:eq(0)”)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마지막 자식 노드 접근&lt;/p&gt;

 	- $(“선택자”).children().last()

 	- $(“선택자”).children(“:last”)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;부모 노드 찾기&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;바로 위의 부모 : $(“선택자”).parent()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 부모 찾기&lt;/p&gt;

 	- $(“선택자”).parents()  모든 부모
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 부모 중 선택자에 해당하는 부모 찾기&lt;/p&gt;

 	- $(“선택자”).parents(“선택자”)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;형제 노드 찾기&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이전 형제 노드 찾기&lt;/p&gt;

 	- $(“선택자”).prev()

 	- $(“선택자”).prevAll(“선택자”);
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음 형제 노드 찾기&lt;/p&gt;

 	- $(“선택자”).next()

 	- $(“선택자”).nextAll(“선택자”);
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;노드 생성,추가,이동,삭제&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;생성&lt;/p&gt;

 	- $(“노드”)

 	- $(“선택자”).html(“&lt;노드&gt;...&quot;)
&lt;/노드&gt;
 	- $(“노드”).clone()
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추가&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.append($추가노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$추가노드.appendTo($기준노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.prepend($추가노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$추가노드.prependTo($기준노드)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;$추가노드.insertBefore($기준노드)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.before($추가노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$추가노드.insertAfter($기준노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.after($추가노드)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;삭제&lt;/p&gt;

    &lt;p&gt;– $(“선택자”).remove()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이동&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.append($이동노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$이동노드.appendTo($기준노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$이동노드.insertBefore($기준노드)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.before($이동노드)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;$이동노드.insertAfter($기준노드)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$기준노드.after($이동노드)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;텍스트 노드 다루기&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;텍스트 노드 생성 : $(“텍스트”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;텍스트 노드 추가 : $기준노드.append(“텍스트”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;텍스트 노드 변경 : $기준노드.text(“새로운 텍스트”)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;css--&quot;&gt;기본 CSS 셀렉터 사용하기&lt;/h3&gt;

&lt;p&gt;a - 모든 링크(&amp;lt;a&amp;gt;) 엘리먼트와 일치하는 셀렉터.&lt;/p&gt;

&lt;p&gt;#exID - exID를 아이디로 가지는 엘리먼트와 일치하는 셀렉터.&lt;/p&gt;

&lt;p&gt;.exClass - exClass를 클래스로 가지는 엘리먼트와 일치하는 셀렉터.&lt;/p&gt;

&lt;p&gt;a#exID.exClass - 아이디가 exID 이고, 클래스가 exClass인 링크와 일치하는 셀렉터.&lt;/p&gt;

&lt;p&gt;p a.exClass - &amp;lt;p&amp;gt; 엘리먼트 내에 클래스가 exClass인 모든 링크와 일치하는 셀렉터.&lt;/p&gt;

&lt;p&gt;아래 코드와 같이 쓰임&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p a.exClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;자식 셀렉터(child selector) : 부모와 자식 엘리먼트는 오른쪽 부등호(&amp;gt;)로 구분&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명) myList 클래스를 지닌 &amp;lt;ul&amp;gt; 엘리먼트의 바로 아래 자식 리스트 앨리먼트인 &amp;lt;li&amp;gt;에서 바로 아래 자식 링크만 선택한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;[ 어트리뷰트 셀렉터 ]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a[href^=http://]&lt;/code&gt; - href의 값이 http://로 시작하는 모든 링크를 의미. 캐럿문자(^)는 값의 시작 부분이 일치하는지를 뜻함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form[method]&lt;/code&gt; - 명시적으로 method 어트리뷰트를 가지는 &amp;lt;form&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input[type=text]&lt;/code&gt; - type이 text인 모든 input 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div[title^=my]&lt;/code&gt; - title 어트리뷰트의 값이 my로 시작하는 모든 &amp;lt;div&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a[href$=.pdf]&lt;/code&gt; - PDF 파일을 참조하는 모든 링크&lt;/p&gt;

&lt;p&gt;a[href*=jquery.com] - jQuery 사이트를 참조하는 모든 &amp;lt;a&amp;gt; 엘리먼트. *는 어트리뷰트의 값이 임의의 문자열을 포함하는 엘리먼트를 찾아오라는 셀렉터.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;li:has(a)&lt;/code&gt; - &amp;lt;a&amp;gt; 엘리먼트를 포함하는 모든 &amp;lt;li&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;li a&lt;/code&gt; - &amp;lt;li&amp;gt;엘리먼트 바로 아래 자식의 모든 &amp;lt;a&amp;gt; 엘리먼트&lt;/p&gt;

&lt;h3 id=&quot;css-&quot;&gt;기본 CSS 셀렉터&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; - 모든 엘리먼트와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; - 태그명이 E인 모든 엘리먼트와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E F&lt;/code&gt; - E의 자손이면서 태그명이 F인 모든 엘리먼트와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E&amp;gt;F&lt;/code&gt; - E의 바로 아래 자식이면서 태그명이 F인 모든 엘리먼트와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E+F&lt;/code&gt; - E의 형제 엘리먼트로 바로 다음에 나오는 엘리먼트 F와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E~F&lt;/code&gt; - E의 형제 엘리먼트로 다음에 나오는 모든 엘리먼트 F와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E:has(F)&lt;/code&gt; - 태그명이 F인 자손을 하나 이상 가지는 태그명이 E인 모든 엘리먼트와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E.C&lt;/code&gt; - 클래스명 C를 가지는 모든 엘리먼트 E와 일치. E의 생략은 *.C와 동일함.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E#I&lt;/code&gt; - 아이디가 I인 엘리먼트 E와 일치. E의 생략은 *#I와 동일함.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E[A]&lt;/code&gt; - 어트리뷰트 A를 가지는 모든 엘리먼트 E와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E[A=V]&lt;/code&gt; - 값이 V인 어트리뷰트 A를 가지는 모든 엘리먼트 E와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E[A^=V]&lt;/code&gt; - 값이 V로 시작하는 어트리뷰트 A를 가지는 모든 엘리먼트 E와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E[A$=V]&lt;/code&gt; - 값이 V로 끝나는 어트리뷰트 A를 가지는 모든 엘리먼트 E와 일치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E[A*=V]&lt;/code&gt; - 값에 V를 포함하는 어트리뷰트 A를 가지는 모든 엘리먼트 E와 일치&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;위치 셀렉터&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a:first&lt;/code&gt; - 페이지에서 첫 번째 &amp;lt;a&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p:odd&lt;/code&gt; - 모든 홀수 번째 문단 &amp;lt;p&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p:even&lt;/code&gt; - 모든 짝수 번째 문단 &amp;lt;p&amp;gt; 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;li:last-child&lt;/code&gt; - 부모 엘리먼트의 마지막 자식 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:first&lt;/code&gt; - 페이지에서 처음으로 일치하는 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:last&lt;/code&gt; - 페이지에서 마지막으로 일치하는 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:first-child&lt;/code&gt; - 첫 번째 자식 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:last-child&lt;/code&gt; - 마지막 자식 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:only-child&lt;/code&gt; - 형제가 없는 모든 엘리먼트를 반환한다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:nth-child(n)&lt;/code&gt; - n번째 자식 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:nth-child(even:odd)&lt;/code&gt; - 짝수 또는 홀수 자식 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:nth-child(Xn+Y)&lt;/code&gt; - 전달된 공식에 따른 n번째 자식 엘리먼트. Y는 0인 경우 생략 가능.&lt;/p&gt;

&lt;p&gt;li:nth-child(3n)은 3의 배수 번째 아이템을 반환&lt;/p&gt;

&lt;p&gt;li:nth-child(5n+1)은 5의 배수 + 1 번째 아이템을 반환&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:even&lt;/code&gt; - 페이지 전체의 짝수 번째 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:odd&lt;/code&gt; - 페이지 전체의 홀수 번째 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:eq(n)&lt;/code&gt; - n번째로 일치하는 엘리먼트&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:gt(n)&lt;/code&gt; - n번째 엘리먼트(포함되지 않음) 이후의 엘리먼트와 일치.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:lt(n)&lt;/code&gt; - n번째 엘리먼트(포함되지 않음) 이전의 엘리먼트와 일치.&lt;/p&gt;

&lt;p&gt;n번째 자식 셀렉터는 CSS와 호환성을 유지하려고 인덱스를 1부터 시작.&lt;/p&gt;

&lt;p&gt;jQuery 정의 셀렉터는 범용 프로그래밍 규약에 따라 인덱스를 0부터 시작.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;정의 셀렉터&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:animated&lt;/code&gt; - 현재 애니메이션이 적용되고 있는 엘리먼트를 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:button&lt;/code&gt; - 모든 버튼을 선택 ( input[type=submit], input[type=reset], input[type=button], button )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:checkbox&lt;/code&gt; - 체크박스 엘리먼트만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt; - 선택된 체크박스나 라디오 버튼만 선택 (CSS에서 지원)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:contains(foo)&lt;/code&gt; - 텍스트 foo를 포함하는 엘리먼트만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:disabled&lt;/code&gt; - 인터페이스에서 비활성화 상태인 모든 폼 엘리먼트를 선택 (CSS에서 지원)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:enabled&lt;/code&gt; - 인터페이스에서 활성화 상태인 모든 엘리먼트를 선택 (CSS에서 지원)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:file&lt;/code&gt; - 모든 파일 엘리먼트를 선택 ( input[type=file] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:header&lt;/code&gt; - 헤더 엘리먼트만 선택 &amp;lt;h1&amp;gt;부터 &amp;lt;h6&amp;gt;까지 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:hidden&lt;/code&gt; - 감춰진 엘리먼트만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:image&lt;/code&gt; - 폼 이미지를 선택 ( input[type=image] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:input&lt;/code&gt; - 폼 엘리먼트만 선택 ( input, select, textarea, button )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:not(filter)&lt;/code&gt; - 필터의 값을 반대로 변경 ( 1.3 버전에서는 변경됨 )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:parent&lt;/code&gt; - 빈 엘리먼트를 제외하고, 텍스트도 포함해서 자식 엘리먼트를 가지는 엘리먼트를 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:password&lt;/code&gt; - 패스워드 엘리먼트만 선택 ( input[type=password] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:radio&lt;/code&gt; - 라디오 버튼 엘리먼트만 선택 ( input[type=radio] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:reset&lt;/code&gt; - 리셋 버튼 선택 ( input[type=reset] 이나 button[type=reset] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:selected&lt;/code&gt; - 선택된 엘리먼트만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:submit&lt;/code&gt; - 전송 버튼을 선택 ( button[type=submit] 이나 input[type=submit] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:text&lt;/code&gt; - 텍스트 엘리먼트만 선택 ( input[type=text] )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:visible&lt;/code&gt; - 보이는 엘리먼트만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:checkbox:checked:enabled&lt;/code&gt; - 활성화되고 선택된 체크박스만 선택&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:not&lt;/code&gt; 필터&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필터 결과가 반대로 나오게 함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CSS 필터에서 지원&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jQuery 정의 셀렉터에서도 동작&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필터 셀렉터에는 적용할 수 있지만 찾기 셀렉터에는 적용하지 못한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모두 콜론 문자(:)나 대괄호 문자([)로 시작.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input:not(:checkbox)&lt;/code&gt; - 체크박스가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 엘리먼트 선택&lt;/p&gt;

&lt;p&gt;필터 셀렉터 - 기준을 추가해서 일치하는 엘리먼트의 집합을 줄여나간다.&lt;/p&gt;

&lt;p&gt;찾기 셀렉터 - 이미 선택된 엘리먼트와 맺은 관계를 통해 다른 엘리먼트를 찾는다. [ 자손 셀렉터(공백문자), 자식 셀렉터(&amp;gt;), 형제 셀렉터(+) ]가 있다.&lt;/p&gt;

&lt;p&gt;커맨드 문법&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; - 확장 집합의 엘리먼트 개수를 반환&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명) 모든 &amp;lt;a&amp;gt; 타입의 엘리먼트의 개수를 반환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get(index)&lt;/code&gt; - 확장된 집합에서 하나 또는 모든 일치하는 엘리먼트를 가져온다. 매개변수가 명시되지 않았다면 모든 엘리먼트를 자바스크립트 배열로 반환&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[alt]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index(element)&lt;/code&gt; - 확장 집합에서 전달된 엘리먼트를 찾고, 집합에서 찾은 엘리먼트의 인덱스를 반환. 집합에 해당 엘리먼트가 존재하지 않으면 -1을 반환&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img#findMe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add(expression)&lt;/code&gt; - expression 매개변수로 명시한 엘리먼트를 확장 집합에 추가한다. 표현식에는 셀렉터, HTML, 코드, DOM 엘리먼트, DOM 엘리먼트 배열이 올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[alt]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[title]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[alt]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'thickBorder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[title]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'seeThrough'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명2) alt 어트리뷰트를 가진 모든 &lt;img /&gt;엘리먼트의 확장 집합을 생성한 뒤 두꺼운 테두리를 만드는 클래스를 적용. title 어트리 뷰트를 가진 &lt;img /&gt; 엘리먼트를 추가하고, 마지막으로 투명도를 주는 클래스를 적용.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;not(expression)&lt;/code&gt; - expression 매개변수의 값에 따라서 일치하는 집합에서 엘리먼트를 제거.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img[title]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[title*=puppy]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;설명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;어트리뷰트를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;지닌&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모든&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;엘리먼트를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;선택할&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;때&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;어트리뷰트&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값이&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;puppy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포함하는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;엘리먼트를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;제외&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter(expression)&lt;/code&gt; - 전달 받은 셀렉터 표현식이나 필터링 함수를 이용해서 확장 집합에서 엘리먼트를 필터링.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'td'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;설명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모든&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;엘리먼트로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구성된&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;확장&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;집합을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;생성한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;다음&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;엘리먼트&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;각각에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;대해&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;메서드에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;전달된&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;호출&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;호출된 함수를 this값으로 현재 순회 중인 엘리먼트를 이용.&lt;/p&gt;

&lt;p&gt;전달된 함수는 정규 표현식을 사용하여 숫자로 내용이 구성된 패턴을 만족하는지 검사.&lt;/p&gt;

&lt;p&gt;필터 함수를 호출한 결과로 false를 반환하는 엘리먼트가 모두 확장 집합에서 제거&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slice(begin, end)&lt;/code&gt; - 일치하는 집합에서 연속하는 일부분을 포함하는 새로운 확장 집합을 생성하고 반환&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; : 반환되는 부분 집합에 포함될 첫 엘리먼트의 위치로, 0부터 시작&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; : 반환되는 부분 집합에 포함될 마지막 엘리먼트의 바로 다음 위치로, 0부터 시작하며, 생략하면 집합의 마지막까지 포함한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명1) 페이지에 있는 모든 엘리먼트를 선택한 다음 세 번째 엘리먼트를 담은 새로운 집합을 생성&lt;/p&gt;

  &lt;p&gt;설명2) 페이지에 있는 모든 엘리먼트를 선택한 다음 처음 네 개의 엘리먼트를 포함한 집합을 생성&lt;/p&gt;

  &lt;p&gt;설명3) 페이지의 모든 엘리먼트와 일치한 다음 처음 네 엘리먼트를 제외한 모든 엘리먼트의 집합을 반환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&amp;lt; 관계를 통해 새로운 확장 집합을 얻을 수 있는 메서드 &amp;gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;children()&lt;/th&gt;
      &lt;th&gt;확장 엘리먼트의 고유한 자식으로 구성된 확장 집합을 반환&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;contents()&lt;/td&gt;
      &lt;td&gt;엘리먼트의 콘텐츠로 구성된 확장 집합을 반환. 텍스트 노드도 포함되며 주로 &amp;lt;iframe&amp;gt; 엘리먼트의 콘텐츠를 얻고자 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;next()&lt;/td&gt;
      &lt;td&gt;확장 집합 내의 각 확장 엘리먼트 바로 다음에 나오는 형제로 구성된 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nextAll()&lt;/td&gt;
      &lt;td&gt;확장 집합 내의 각 확장 엘리먼트 다음에 나오는 모든 형제로 구성된 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parent()&lt;/td&gt;
      &lt;td&gt;확장 집합 내에 있는 모든 확장 엘리먼트의 바로 위 부모로 구성된 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parents()&lt;/td&gt;
      &lt;td&gt;모든 확장 엘리먼트의 조상으로 구성된 확장 집합을 반환. 바로 위 부모와 상위의 모든 조상이 포함되지만 문서 루트(document root)는 포함되지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prev()&lt;/td&gt;
      &lt;td&gt;확장 집합 내의 각 확장 엘리먼트 바로 이전에 나오는 형제로 구성된 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prevAll()&lt;/td&gt;
      &lt;td&gt;확장 집합 내의 각 확장 엘리먼트 이전에 나오는 모든 형제로 구성된 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;siblings()&lt;/td&gt;
      &lt;td&gt;확장 엘리먼트의 모든 형제를 포함하는 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;find(selector)&lt;/td&gt;
      &lt;td&gt;원본의 모든 엘리먼트 중 전달된 셀렉터 표현식과 일치하는 엘리먼트로 구성된 새로운 확장 집합을 반환&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrappedSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p cite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명) 변수 wrappedSet에 할당된 확장 집합에서, 문단 &amp;lt;p&amp;gt;에 포함된 모든 인용문 &amp;lt;cite&amp;gt;로 구성된 확장 집합을 반환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is(selector)&lt;/code&gt; - 확장 집합에 전달된 셀렉터 표현식과 일치하는 엘리먼트가 있는지 확인. 엘리먼트가 하나 이상 셀렉터와 일치하면 true를, 그렇지 않으면 false를 반환&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명) 현제 페이지에 이미지 엘리먼트가 있으면 hasImage 변수의 값을 true로 설정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;end()&lt;/code&gt; - jQuery 커맨드 체인에서 사용하며 이전 확장 집합으로 돌아간다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예제&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#somewhere'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'beenCloned'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;설명) 페이지의 모든 &amp;lt;img&amp;gt; 엘리먼트로 구성된 원본 확장 집합을 close() 메서드를 통해 복사본 확장 집합을 생성한 뒤, 복사본인 두 번째 확장 집합을 반환한다. 복사본 확장 집합에 appendTo() 커맨드를 수행한 뒤, end() 커맨드를 통해 현재 확장 집합(복사본 확장 집합)에서 앞으로 돌아가서 이전 확장 집합(원본 확장 집합)을 반환하고, 원본 확장 집합에 addClass() 커맨드를 수행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;andSelf()&lt;/code&gt; - 커맨드 체인에서 이전 확장 집합 두 개를 하나로 합친다&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.naver.com/azanghs/220392447973&quot;&gt;jquery_유틸&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.jquery.com/&quot;&gt;jquery_doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 10:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/10/JQuery_findnode/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/10/JQuery_findnode/</guid>
        
        
        <category>js</category>
        
      </item>
    
  </channel>
</rss>
