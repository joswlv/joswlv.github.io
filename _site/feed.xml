<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joswlv</title>
    <description></description>
    <link>http://joswlv.github.io/</link>
    <atom:link href="http://joswlv.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 27 Feb 2017 15:47:47 +0900</pubDate>
    <lastBuildDate>Mon, 27 Feb 2017 15:47:47 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>기본 RDD연산들(트랜스포메이션, 액션)</title>
        <description>&lt;h1 id=&quot;rdd-&quot;&gt;기본 RDD 트랜스포메이션&lt;/h1&gt;

&lt;h3 id=&quot;rdd--rdd-&quot;&gt;&lt;strong&gt;{1,2,3,3}을 가지고 있는 RDD에 대한 RDD 트랜스포메이션&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수 이름&lt;/th&gt;
      &lt;th&gt;용도&lt;/th&gt;
      &lt;th&gt;예&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;map()&lt;/td&gt;
      &lt;td&gt;RDD의 각 요소에 함수를 적용하고 결과 RDD를 되돌려준다.&lt;/td&gt;
      &lt;td&gt;rdd.map(x -&amp;gt; x+1)&lt;/td&gt;
      &lt;td&gt;{2,3,4,4}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;flatMap()&lt;/td&gt;
      &lt;td&gt;RDD의 각 요소에 함수를 적용하고 반환된 반복자의 내용들로 이루어진 RDD를 되될려준다. 종종 단어 분해를 위해 쓰인다.&lt;/td&gt;
      &lt;td&gt;rdd.flatMap(x -&amp;gt; x.to(3))&lt;/td&gt;
      &lt;td&gt;{1,2,3,2,3,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;filter()&lt;/td&gt;
      &lt;td&gt;filter()로 전달된 함수의 조건을 통과한 값으로만 이루어진 RDD를 되돌려 준다.&lt;/td&gt;
      &lt;td&gt;rdd.filter(x -&amp;gt; x != 1)&lt;/td&gt;
      &lt;td&gt;{2,3,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;distinct()&lt;/td&gt;
      &lt;td&gt;중복제거&lt;/td&gt;
      &lt;td&gt;rdd.distinct()&lt;/td&gt;
      &lt;td&gt;{1,2,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sample(withReplacement, fraction, [seed])&lt;/td&gt;
      &lt;td&gt;복원 추출(withReplacement-true)이나 비복원 추출로 RDD에서 표본을 뽑아낸다.&lt;/td&gt;
      &lt;td&gt;rdd.sample(false, 0.5)&lt;/td&gt;
      &lt;td&gt;생략&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;rdd--&quot;&gt;&lt;strong&gt;{1,2,3}과 {3,4,5}를 가진 두 RDD에 대한 트랜스포메이션&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수 이름&lt;/th&gt;
      &lt;th&gt;용도&lt;/th&gt;
      &lt;th&gt;예&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;union()&lt;/td&gt;
      &lt;td&gt;두 RDD에 잇는 데이터들을 합한 RDD를 생성한다.&lt;/td&gt;
      &lt;td&gt;rdd.union(other)&lt;/td&gt;
      &lt;td&gt;{1,2,3,3,4,5}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;intersection()&lt;/td&gt;
      &lt;td&gt;양쪽 RDD에 모두 있는 데이터들만을 가진 RDD를 반환한다.&lt;/td&gt;
      &lt;td&gt;rdd.intersection(other)&lt;/td&gt;
      &lt;td&gt;{3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;subtract()&lt;/td&gt;
      &lt;td&gt;한 RDD가 가진 데이터를 다른 쪽에서 삭제한다&lt;/td&gt;
      &lt;td&gt;rdd.subtract(other)&lt;/td&gt;
      &lt;td&gt;{1,2}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cartesian()&lt;/td&gt;
      &lt;td&gt;두 RDD의 카테시안 곱&lt;/td&gt;
      &lt;td&gt;rdd.cartesian(other)&lt;/td&gt;
      &lt;td&gt;{{1,3},{1,4},{1,5} … ,{3,5}}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rdd--1&quot;&gt;기본 RDD 액션&lt;/h1&gt;

&lt;h3 id=&quot;rdd---&quot;&gt;&lt;strong&gt;{1,2,3,3}을 갖고 있는 RDD에 대한 기본 액션&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;함수 이름&lt;/th&gt;
      &lt;th&gt;용도&lt;/th&gt;
      &lt;th&gt;예&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;collect()&lt;/td&gt;
      &lt;td&gt;RDD의 모든 데이터요소 리턴&lt;/td&gt;
      &lt;td&gt;rdd.collect()&lt;/td&gt;
      &lt;td&gt;{1,2,3,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;count()&lt;/td&gt;
      &lt;td&gt;RDD의 요소 개수 리턴&lt;/td&gt;
      &lt;td&gt;rdd.count()&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;countByValue()&lt;/td&gt;
      &lt;td&gt;RDD에 있는 각 값의 개수 리턴&lt;/td&gt;
      &lt;td&gt;rdd.countByValue()&lt;/td&gt;
      &lt;td&gt;{{1,1},{2,1},{3,2}}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;take(num)&lt;/td&gt;
      &lt;td&gt;RDD의 값들 중 num개 리턴&lt;/td&gt;
      &lt;td&gt;rdd.take(2)&lt;/td&gt;
      &lt;td&gt;{1,2}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;top(num)&lt;/td&gt;
      &lt;td&gt;RDD의 값들 중 상위 num개 리턴&lt;/td&gt;
      &lt;td&gt;rdd.top(2)&lt;/td&gt;
      &lt;td&gt;{3,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;takeOrdered(num(ordering)&lt;/td&gt;
      &lt;td&gt;제공된 ordering 기준으로 num개 값 리턴&lt;/td&gt;
      &lt;td&gt;rdd.takeOrdered(2)(myOrdering)&lt;/td&gt;
      &lt;td&gt;{3,3}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;takeSample(withReplacement, num, [seed])&lt;/td&gt;
      &lt;td&gt;무작위 값을 리턴&lt;/td&gt;
      &lt;td&gt;rdd.takeSample(false,1)&lt;/td&gt;
      &lt;td&gt;생략&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reduce(func)&lt;/td&gt;
      &lt;td&gt;RDD의 값들을 병렬로 병합 연산한다.&lt;/td&gt;
      &lt;td&gt;rdd.reduce((x,y) -&amp;gt; x+y)&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fold(zero)(func)&lt;/td&gt;
      &lt;td&gt;reduce()와 동일하나 제로 밸류를 넣어준다.&lt;/td&gt;
      &lt;td&gt;rdd.fold(0)(x,y) -&amp;gt; x+y&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;aggregate(zeroValue)(seqOP, combOp)&lt;/td&gt;
      &lt;td&gt;reduce()와 유사하나 다른 타입을 리턴한다.&lt;/td&gt;
      &lt;td&gt;rdd.aggregate((0,0))((x,y) -&amp;gt; (x._1 + y, x._2 +1), (x,y) -&amp;gt; (x._1 + y._1, x._2 + y._2))&lt;/td&gt;
      &lt;td&gt;{9,4}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;foreach(func)&lt;/td&gt;
      &lt;td&gt;RDD의 각값에 func을 적용한다.&lt;/td&gt;
      &lt;td&gt;rdd.foreach(func)&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Sun, 26 Feb 2017 10:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/02/26/basicrdd/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/02/26/basicrdd/</guid>
        
        
        <category>Spark</category>
        
      </item>
    
      <item>
        <title>ElasticSearch 기초</title>
        <description>&lt;h1 id=&quot;elasticsearch-&quot;&gt;ElasticSearch 기초&lt;/h1&gt;

&lt;h3 id=&quot;ubuntu&quot;&gt;설치 (ubuntu)&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#fileName : ElasticSearchInstall.sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### USAGE&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### ./ElasticSearch.sh 1.7 will install Elasticsearch 1.7&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### ./ElasticSearch.sh will fail because no version was specified (exit code 1)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### CLI options Contributed by @janpieper&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### Check http://www.elasticsearch.org/download/ for latest version of ElasticSearch&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### ElasticSearch version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  Please specify the Elasticsearch version you want to install!&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ $0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 1.7&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi
 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ELASTICSEARCH_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ELASTICSEARCH_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ ^[0-9]+&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0-9]+ &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  The specified Elasticsearch version isn't valid!&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ $0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 1.7&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;2
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;### Install Java 8&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
sudo apt-get install python-software-properties -y
sleep 1
sudo add-apt-repository ppa:webupd8team/java -y
sleep 1
sudo apt-get update
sleep 1
sudo apt-get install oracle-java8-installer -y

&lt;span class=&quot;c&quot;&gt;### Download and install the Public Signing Key&lt;/span&gt;
wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -

&lt;span class=&quot;c&quot;&gt;### Setup Repository&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://packages.elastic.co/elasticsearch/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ELASTICSEARCH_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/debian stable main&quot;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list.d/elk.list

&lt;span class=&quot;c&quot;&gt;### Install Elasticsearch&lt;/span&gt;
sudo apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install elasticsearch -y

&lt;span class=&quot;c&quot;&gt;### Start ElasticSearch &lt;/span&gt;
sudo service elasticsearch start

&lt;span class=&quot;c&quot;&gt;### Lets wait a little while ElasticSearch starts&lt;/span&gt;
sleep 5

&lt;span class=&quot;c&quot;&gt;### Make sure service is running&lt;/span&gt;
curl http://localhost:9200

&lt;span class=&quot;c&quot;&gt;### Should return something like this:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# {&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  &quot;status&quot; : 200,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  &quot;name&quot; : &quot;Storm&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  &quot;version&quot; : {&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    &quot;number&quot; : &quot;1.3.1&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    &quot;build_hash&quot; : &quot;2de6dc5268c32fb49b205233c138d93aaf772015&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    &quot;build_timestamp&quot; : &quot;2014-07-28T14:45:15Z&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    &quot;build_snapshot&quot; : false,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    &quot;lucene_version&quot; : &quot;4.9&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  },&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  &quot;tagline&quot; : &quot;You Know, for Search&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 스크립트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;./ElasticSearchInstall.sh [버전]&lt;/code&gt;으로 실행 실행하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;기본 개념&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Elastic Search&lt;/th&gt;
      &lt;th&gt;Relational DB&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Index&lt;/td&gt;
      &lt;td&gt;Databases&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Type&lt;/td&gt;
      &lt;td&gt;Table&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Document&lt;/td&gt;
      &lt;td&gt;Row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Field&lt;/td&gt;
      &lt;td&gt;Column&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mapping&lt;/td&gt;
      &lt;td&gt;Schema&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;RESTfull 방식으로 사용된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Elastic Search&lt;/th&gt;
      &lt;th&gt;Relational DB&lt;/th&gt;
      &lt;th&gt;CRUD&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;Select&lt;/td&gt;
      &lt;td&gt;Read&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;Update&lt;/td&gt;
      &lt;td&gt;Update&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Post&lt;/td&gt;
      &lt;td&gt;Insert&lt;/td&gt;
      &lt;td&gt;Create&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;Delete&lt;/td&gt;
      &lt;td&gt;Delete&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;1) Index 조회&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XGET '[elasticsearch 주소]/[Index name]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/basketball?pretty
{
  &quot;basketball&quot; : {
    &quot;aliases&quot; : { },
    &quot;mappings&quot; : {
      &quot;record&quot; : {
        &quot;properties&quot; : {
          &quot;assists&quot; : {
            &quot;type&quot; : &quot;long&quot;
          },
          &quot;blocks&quot; : {
            &quot;type&quot; : &quot;long&quot;
          },
          &quot;name&quot; : {
            &quot;type&quot; : &quot;string&quot;
          },
          &quot;points&quot; : {
            &quot;type&quot; : &quot;long&quot;
          },
          &quot;rebounds&quot; : {
            &quot;type&quot; : &quot;long&quot;
          },
          &quot;submit_date&quot; : {
            &quot;type&quot; : &quot;date&quot;,
            &quot;format&quot; : &quot;yyyy-MM-dd&quot;
          },
          &quot;team&quot; : {
            &quot;type&quot; : &quot;string&quot;
          }
        }
      }
    },
    &quot;settings&quot; : {
      &quot;index&quot; : {
        &quot;creation_date&quot; : &quot;1487474066966&quot;,
        &quot;uuid&quot; : &quot;uFna9rNjR5S3vRKEZtEHvg&quot;,
        &quot;number_of_replicas&quot; : &quot;1&quot;,
        &quot;number_of_shards&quot; : &quot;5&quot;,
        &quot;version&quot; : {
          &quot;created&quot; : &quot;2030399&quot;
        }
      }
    },
    &quot;warmers&quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;basketball&lt;/code&gt; Index정보를 볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;record&lt;/code&gt;라는 Type의 정보도 함께 나오는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) &lt;code class=&quot;highlighter-rouge&quot;&gt;_update&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_update&lt;/code&gt;옵션은 Type의 Field를 추가할 때 사용한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 Document가 있다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/classes/class/1/?pretty
{
  &quot;_index&quot; : &quot;classes&quot;,
  &quot;_type&quot; : &quot;class&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 1,
  &quot;found&quot; : true,
  &quot;_source&quot; : {
    &quot;title&quot; : &quot;Bigdata&quot;,
    &quot;professor&quot; : &quot;Jo&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;point&lt;/code&gt; Field를 추가하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XPOST localhost:9200/classes/class/1/_update?pretty -d '
&amp;gt; {&quot;doc&quot;:{&quot;point&quot;:1}}'
{
  &quot;_index&quot; : &quot;classes&quot;,
  &quot;_type&quot; : &quot;class&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 2,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;결과를 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ip-172-31-12-34 ch04]# curl -XGET localhost:9200/classes/class/1/?pretty
{
  &quot;_index&quot; : &quot;classes&quot;,
  &quot;_type&quot; : &quot;class&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 2,
  &quot;found&quot; : true,
  &quot;_source&quot; : {
    &quot;title&quot; : &quot;Bigdata&quot;,
    &quot;professor&quot; : &quot;Jo&quot;,
    &quot;point&quot; : 1
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;추가 된 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) &lt;code class=&quot;highlighter-rouge&quot;&gt;_bulk&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러개의 Document를 입력할 때 사용한다.&lt;/p&gt;

&lt;p&gt;다음은 파일에서 값을 가져오는 방법이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;culr -XPOST [elasticsearch 주소]/_bulk --data-binary @[파일명]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;4) Mapping&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Index를 생성하면 mapping 정보가 빠져 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [root@bigdataStudy]# curl -XGET localhost:9200/classes/?pretty
{
  &quot;classes&quot; : {
    &quot;aliases&quot; : { },
    &quot;mappings&quot; : { },
    &quot;settings&quot; : {
      &quot;index&quot; : {
        &quot;creation_date&quot; : &quot;1487477362931&quot;,
        &quot;uuid&quot; : &quot;Z3HY5liZToOyUiEgRL9J4g&quot;,
        &quot;number_of_replicas&quot; : &quot;1&quot;,
        &quot;number_of_shards&quot; : &quot;5&quot;,
        &quot;version&quot; : {
          &quot;created&quot; : &quot;2030399&quot;
        }
      }
    },
    &quot;warmers&quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;class라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;의 mapping 값을 다음과 같이 입력하겠다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;classesRating_mapping.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;professor&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;semester&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;student_count&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;submit_date&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;school_location&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geo_point&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;입력을 다음과 같이 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XPUT localhost:9200/classes/class/_mapping?pretty -d @classesRating_mapping.json
{
  &quot;acknowledged&quot; : true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;의 mapping값이 입력된 것을 확인 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/classes/?pretty
{
  &quot;classes&quot; : {
    &quot;aliases&quot; : { },
    &quot;mappings&quot; : {
      &quot;class&quot; : {
        &quot;properties&quot; : {
          &quot;major&quot; : {
            &quot;type&quot; : &quot;string&quot;
          },
          &quot;professor&quot; : {
            &quot;type&quot; : &quot;string&quot;
          },
          &quot;rating&quot; : {
            &quot;type&quot; : &quot;integer&quot;
          },
          &quot;school_location&quot; : {
            &quot;type&quot; : &quot;geo_point&quot;
          },
          &quot;semester&quot; : {
            &quot;type&quot; : &quot;string&quot;
          },
          &quot;student_count&quot; : {
            &quot;type&quot; : &quot;integer&quot;
          },
          &quot;submit_date&quot; : {
            &quot;type&quot; : &quot;date&quot;,
            &quot;format&quot; : &quot;yyyy-MM-dd&quot;
          },
          &quot;title&quot; : {
            &quot;type&quot; : &quot;string&quot;
          },
          &quot;unit&quot; : {
            &quot;type&quot; : &quot;integer&quot;
          }
        }
      }
    },
    &quot;settings&quot; : {
      &quot;index&quot; : {
        &quot;creation_date&quot; : &quot;1487477362931&quot;,
        &quot;uuid&quot; : &quot;Z3HY5liZToOyUiEgRL9J4g&quot;,
        &quot;number_of_replicas&quot; : &quot;1&quot;,
        &quot;number_of_shards&quot; : &quot;5&quot;,
        &quot;version&quot; : {
          &quot;created&quot; : &quot;2030399&quot;
        }
      }
    },
    &quot;warmers&quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5) &lt;code class=&quot;highlighter-rouge&quot;&gt;_search&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RDBMS의 &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt;조건 같은 느낌도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XGET localhost:9200/basketball/record/_search?q=points:30&amp;amp;pretty
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;위는 record &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;에서 points가 30인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;를 출력하게 된다.&lt;/p&gt;

&lt;p&gt;더 많은 옵션은 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html&quot;&gt;ElasticSearch API Doc&lt;/a&gt;에서 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;6) Aggregation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Metrics Aggregations - sum, min, max, avg을 구할 때 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bucket Aggregations - RDBMS의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Group By&lt;/code&gt;와 같은 기능을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_search&lt;/code&gt;옵션과 함께 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;avg_score&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;avg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;points&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위와 같이 Metrics Aggregation 설정 json파일을 만든다.&lt;/p&gt;

&lt;p&gt;평균을 구하는 aggregation이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aggs&lt;/code&gt;은 aggregation을 사용하겠다는 선언이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avg_score&lt;/code&gt;은 alias같은 느낌이다. 검색 결과의 field이름 이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avg&lt;/code&gt;는 Metrics Aggregation에서 평균을 구하는 옵션이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;avg&lt;/code&gt;에 사용되는  &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;값이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;검색 결과는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/_search?pretty --data-binary @avg_points_aggs.json
{
  &quot;took&quot; : 9,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 15,
    &quot;successful&quot; : 15,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 2,
    &quot;max_score&quot; : 0.0,
    &quot;hits&quot; : [ ]
  },
  &quot;aggregations&quot; : {
    &quot;avg_score&quot; : {
      &quot;value&quot; : 25.0
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;평균값이 나온 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;Metrics Aggregation에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;stats&lt;/code&gt;옵션을 사용하면 count, min, max, avg, sum을 한번에 출력한다.&lt;/p&gt;

&lt;p&gt;Bucket Aggregation예도 한번 보자&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&quot;size&quot; : 0,
	&quot;aggs&quot; : {
		&quot;team_stats&quot; : {
			&quot;terms&quot; : {
				&quot;field&quot; : &quot;team&quot;
			},
			&quot;aggs&quot; : {
				&quot;stats_score&quot; : {
					&quot;stats&quot; : {
						&quot;field&quot; : &quot;points&quot;
					}
				}
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 aggregation json파일을 만들었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aggs&lt;/code&gt;를 사용한다고 선언했다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;terms&lt;/code&gt;라는 bucket aggregation의 옵션을 사용한다. 이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;team&lt;/code&gt;이라는 필드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;group by&lt;/code&gt;하겠다라는 뜻이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub aggs&lt;/code&gt;를 선언하고 point로 Metrics정보를 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 4개의 Documents를 입력하였다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/_search?pretty
{
  &quot;took&quot; : 4,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 15,
    &quot;successful&quot; : 15,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 4,
    &quot;max_score&quot; : 1.0,
    &quot;hits&quot; : [ {
      &quot;_index&quot; : &quot;basketball&quot;,
      &quot;_type&quot; : &quot;record&quot;,
      &quot;_id&quot; : &quot;2&quot;,
      &quot;_score&quot; : 1.0,
      &quot;_source&quot; : {
        &quot;team&quot; : &quot;Chicago&quot;,
        &quot;name&quot; : &quot;Michael Jordan&quot;,
        &quot;points&quot; : 20,
        &quot;rebounds&quot; : 5,
        &quot;assists&quot; : 8,
        &quot;blocks&quot; : 4,
        &quot;submit_date&quot; : &quot;1996-10-13&quot;
      }
    }, {
      &quot;_index&quot; : &quot;basketball&quot;,
      &quot;_type&quot; : &quot;record&quot;,
      &quot;_id&quot; : &quot;4&quot;,
      &quot;_score&quot; : 1.0,
      &quot;_source&quot; : {
        &quot;team&quot; : &quot;LA&quot;,
        &quot;name&quot; : &quot;Kobe Bryant&quot;,
        &quot;points&quot; : 40,
        &quot;rebounds&quot; : 4,
        &quot;assists&quot; : 8,
        &quot;blocks&quot; : 6,
        &quot;submit_date&quot; : &quot;2014-11-13&quot;
      }
    }, {
      &quot;_index&quot; : &quot;basketball&quot;,
      &quot;_type&quot; : &quot;record&quot;,
      &quot;_id&quot; : &quot;1&quot;,
      &quot;_score&quot; : 1.0,
      &quot;_source&quot; : {
        &quot;team&quot; : &quot;Chicago&quot;,
        &quot;name&quot; : &quot;Michael Jordan&quot;,
        &quot;points&quot; : 30,
        &quot;rebounds&quot; : 3,
        &quot;assists&quot; : 4,
        &quot;blocks&quot; : 3,
        &quot;submit_date&quot; : &quot;1996-10-11&quot;
      }
    }, {
      &quot;_index&quot; : &quot;basketball&quot;,
      &quot;_type&quot; : &quot;record&quot;,
      &quot;_id&quot; : &quot;3&quot;,
      &quot;_score&quot; : 1.0,
      &quot;_source&quot; : {
        &quot;team&quot; : &quot;LA&quot;,
        &quot;name&quot; : &quot;Kobe Bryant&quot;,
        &quot;points&quot; : 30,
        &quot;rebounds&quot; : 2,
        &quot;assists&quot; : 8,
        &quot;blocks&quot; : 5,
        &quot;submit_date&quot; : &quot;2014-10-13&quot;
      }
    } ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그리고 위의 aggregation을 사용하여 검색을 해보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bigdataStudy]# curl -XGET localhost:9200/_search?pretty --data-binary @stats_by_team.json
{
  &quot;took&quot; : 13,
  &quot;timed_out&quot; : false,
  &quot;_shards&quot; : {
    &quot;total&quot; : 15,
    &quot;successful&quot; : 15,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {
    &quot;total&quot; : 4,
    &quot;max_score&quot; : 0.0,
    &quot;hits&quot; : [ ]
  },
  &quot;aggregations&quot; : {
    &quot;team_stats&quot; : {
      &quot;doc_count_error_upper_bound&quot; : 0,
      &quot;sum_other_doc_count&quot; : 0,
      &quot;buckets&quot; : [ {
        &quot;key&quot; : &quot;chicago&quot;,
        &quot;doc_count&quot; : 2,
        &quot;stats_score&quot; : {
          &quot;count&quot; : 2,
          &quot;min&quot; : 20.0,
          &quot;max&quot; : 30.0,
          &quot;avg&quot; : 25.0,
          &quot;sum&quot; : 50.0
        }
      }, {
        &quot;key&quot; : &quot;la&quot;,
        &quot;doc_count&quot; : 2,
        &quot;stats_score&quot; : {
          &quot;count&quot; : 2,
          &quot;min&quot; : 30.0,
          &quot;max&quot; : 40.0,
          &quot;avg&quot; : 35.0,
          &quot;sum&quot; : 70.0
        }
      } ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;chicago&lt;/code&gt;팀의 stats와 &lt;code class=&quot;highlighter-rouge&quot;&gt;la&lt;/code&gt;팀의 stats가 출력되는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.inflearn.com/course/elk-%EC%8A%A4%ED%83%9D-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/&quot;&gt;Inflearn강의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ricardo-rossi/8265589463915837429d&quot;&gt;ricardo-rossi-GitRepo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/index.html&quot;&gt;ElasticSearch Doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 18 Feb 2017 10:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/02/18/elasticsearchbasic/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/02/18/elasticsearchbasic/</guid>
        
        
        <category>ElasticSearch</category>
        
      </item>
    
      <item>
        <title>RDBMS vs NOSQL</title>
        <description>&lt;h4 id=&quot;rdbms-nosql&quot;&gt;RDBMS? NOSQL?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 읽기 쓰기 등 퍼포먼스에 치중한다면 NOSQL, 트랜잭션과 같은 정합성 위주의 시스템을 사용한다면 RDBMS&lt;/li&gt;
  &lt;li&gt;RDBMS 컬럼 변경 용이하지 않음, NOSQL 컬럼 변경 용이&lt;/li&gt;
  &lt;li&gt;NOSQL의 경우 sorting, join, grouping, range query, index 매우 취약&lt;/li&gt;
  &lt;li&gt;RDBMS 학습 비용 x&lt;/li&gt;
  &lt;li&gt;NOSQL 학습 비용 소요 (운영시 어떤 장애상황이 생길지 예측이 어려움)&lt;/li&gt;
  &lt;li&gt;NOSQL 가장 큰 장점 (Scale-Out, RDBMS보다 상대적으로 빠른 쓰기/읽기)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOSQL 분류&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[ 키 밸류형 ] redis, memcached, Oracle Coherence&lt;/p&gt;

&lt;p&gt;[ 컬럼형   ] Cassandra, HBASE, Cloud Datastore&lt;/p&gt;

&lt;p&gt;[ 문서형   ] MongoDB, Couchbase, MarkLogic, PostgreSQL, MySQL, DynamoDB MS-DocumentDB&lt;/p&gt;

&lt;p&gt;[ 그래프형  ] Neo4j&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;DataStore&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;설 명&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;장 점&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;&lt;em&gt;단 점&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cassandra&lt;/td&gt;
      &lt;td&gt;- Facebook에 의해 2008년 아파치 오픈소스로 공개된 분산 데이터 베이스 (자바 언어 기반)&lt;br /&gt; - 컬럼 단위로 관리되어 컬럼형으로 분류&lt;br /&gt; - 대용량의 데이터 트랜잭션에 대해 고성능 처리가 가능(실제 트위터 MYSQL -&amp;gt; Cassandra로 전환)&lt;/td&gt;
      &lt;td&gt;- 대량으로 쓰기가 발생하는 서비스에 좋음&lt;br /&gt; - 확장성이 뛰어남&lt;br /&gt; - Apache Foundation에서 개발중이며커뮤니티 활발&lt;br /&gt; - Scale-Out&lt;/td&gt;
      &lt;td&gt;- 최소 3대 이상 구성(클러스터 환경)&lt;br /&gt; - 복잡한 조건 검색 불가&lt;br /&gt; - 데이터 갱신 및 입력시 Atomic한 처리가 힘듬&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HBase&lt;/td&gt;
      &lt;td&gt;- 대량 데이터를 우수한 성능으로 데이터 일관성을 보장하면서 다뤄야 할 때 주로 사용&lt;br /&gt; - 대량 데이터 분석 및 처리를 위해 사용되는 Hadoop의 산하 프로젝트로 시작된 데이터베이스 (HDFS 및 MapReduce등과 함께 사용하기에 최적화) &lt;br /&gt; - 수십 테러바이트가 넘는 빅데이터에 적합&lt;/td&gt;
      &lt;td&gt;- 하둡 기반에서 동작하고 다양한 하둡 의 도구들과 상호 운영성이 좋음&lt;br /&gt; - 데이터 일관성 보장 우수(상대적)&lt;/td&gt;
      &lt;td&gt;- 5대 미만에서는 사용할 수 없다(대규모 전용)&lt;br /&gt; - 성능이 좋진 않다 (상대적)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MongoDB&lt;/td&gt;
      &lt;td&gt;- MongoDB는 10gen 사에서 개발된 높은 성능과 확장성을 가지고 있는 데이터베이스&lt;br /&gt; - NoSQL 데이터베이스에서는 문서형 데이터베이스로 분류(C언어 기반)&lt;br /&gt; - 데이터를 입력할때 데이터 구조 정보를 포함하여 BSON(JSON을 바이너리화한것)형식으로 저장하고, key value로 사용&lt;br /&gt; - NON-SCHEMA&lt;br /&gt; -비정형 데이터, 파일 데이터등의 스키마프리(Scheme free)모델에서 적합&lt;br /&gt; - SQL 과 비슷한 방식의 쿼리 사용&lt;/td&gt;
      &lt;td&gt;- 스키마 없이 사용 가능 &lt;br /&gt; - SQL 과 비슷한 방식의 쿼리 사용&lt;br /&gt; - 몽고는 쓰기할때 메모리에 먼저 Write 후에 1분 단위로 Flushing하는 Write back 방식을 사용한기 때문에 write성능이 좋음&lt;br /&gt; - Read시에는 파일의 Index를 메모리에 로딩해   놓고 찾는다(memory mapped file) &lt;br /&gt; - 빠름&lt;br /&gt; - 다양한 기능 제공&lt;br /&gt;&lt;/td&gt;
      &lt;td&gt;- JOIN이나 트랜잭션 처리가 불가능&lt;br /&gt; - 디스크에 쓰기가 비동기식으로 이루어진다. 때문에 경우에 따라 데이터가 유실될 가능성도 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;cassandra--hbase-&quot;&gt;[ Cassandra &amp;amp; HBase ]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;카산드라 클러스터 설정 및 구성이 HBase 클러스터 구성보다 훨씬 쉽다.&lt;/li&gt;
  &lt;li&gt;카산드라가 일반적으로 write시 5배 이상의 더 나은 성능, read시 4배 이상의 성능을 보인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cassandra--mongodb-&quot;&gt;[ Cassandra &amp;amp; MongoDB ]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Cassandra 노드가 추가될수록 MonogoDB 보다 훨씬 나은 선형적인 성능 향상을 보인다.&lt;/li&gt;
  &lt;li&gt;다중 Index가 필요한 구조라면 MongoDB를 선택하고, 데이터 항목 변경이 많고 unique access가 많은 경우라면 Cassandra가 적합&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://db-engines.com/en/system/Cassandra;MongoDB&quot;&gt;http://db-engines.com/en/system/Cassandra;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;성능비교&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://academy.datastax.com/planet-cassandra/nosql-performance-benchmarks&quot;&gt;https://academy.datastax.com/planet-cassandra/nosql-performance-benchmarks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.datastax.com/nosql-databases/benchmarks-cassandra-vs-mongodb-vs-hbase&quot;&gt;https://www.datastax.com/nosql-databases/benchmarks-cassandra-vs-mongodb-vs-hbase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 10:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/02/13/rdmsvsnosql/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/02/13/rdmsvsnosql/</guid>
        
        
        <category>BigData</category>
        
      </item>
    
      <item>
        <title>Stored Procedure으로 Insert</title>
        <description>&lt;h1 id=&quot;mysql-stored-procedure-insert&quot;&gt;MySQL Stored Procedure으로 Insert&lt;/h1&gt;

&lt;p&gt;쿼리테스트를 위한 테스트 데이터 1000만건을 insert을 해야한다. 이런 미션을 해결하기 위해 procedure를 사용했다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 저장 프로시저란?&lt;/h2&gt;

&lt;p&gt;여러 SQL문을 하나의 SQL문 처럼 정리하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL procedure명&lt;/code&gt;라는 명령어로 실행할 수 있게 만든 것을 저장프로시저(Stored Procedure)라고 한다.&lt;/p&gt;

&lt;p&gt;저장프로시저는 MySQL버전 5.0이상에서 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;no-using-transaction&quot;&gt;2. 첫번째 시도! (no using TRANSACTION)&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILL_RATE_TEST_DATA&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
		
	&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Y%m%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQ_CNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x2011'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELIMITER&lt;/code&gt;는 저장프로시저에서 구분문자를 &lt;code class=&quot;highlighter-rouge&quot;&gt;세미콜론(;)&lt;/code&gt;이 아닌 다른 문자로 변경해준다. 위의 예에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;을 사용했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;90만건을 insert를 하는 데 &lt;code class=&quot;highlighter-rouge&quot;&gt;236s&lt;/code&gt;을 기다려야한다.&lt;/p&gt;

&lt;h2 id=&quot;using-transaction&quot;&gt;3. 두번째 시도(using TRANSACTION)&lt;/h2&gt;

&lt;p&gt;다음으로 시도한 방버은 쿼리실행을 &lt;code class=&quot;highlighter-rouge&quot;&gt;TRANSCATION&lt;/code&gt;안에 넣는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILL_RATE_TEST_DATA&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
	&lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
	&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATE_SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Y%m%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DO&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQ_CNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x2011'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;START TRANSACTION&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;COMMIT;&lt;/code&gt;사이에 쿼리문을 넣어주면 된다.&lt;/p&gt;

&lt;p&gt;실행속도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;68s&lt;/code&gt; 거의 4배 빨라진 것을 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 더 나아가기&lt;/h2&gt;

&lt;p&gt;Procedure에서 cursor와 trigger 등을 응용 사용하는 법이 있다.&lt;/p&gt;

&lt;p&gt;다음 사이트를 참조하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://recoveryman.tistory.com/186&quot;&gt;저장 프로시저 활용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yookeun.github.io/database/2015/04/10/mysql-procedure/&quot;&gt;프로시저/커서사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bizadmin.tistory.com/entry/MySQL-Fetch-Cursor-%EB%AC%B8-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95&quot;&gt;프로시저/커서사용2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/ko-kr/library/ms175976.aspx&quot;&gt;프로시저/예외처리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mysqltutorial.org/mysql-error-handling-in-stored-procedures/&quot;&gt;프로시저/erro처리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 08:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/01/09/mysqlprocedureinsert/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/01/09/mysqlprocedureinsert/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>Java String에 대해..</title>
        <description>&lt;h1 id=&quot;java-string&quot;&gt;Java String&lt;/h1&gt;

&lt;p&gt;우선 Java의 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 객체는 immutable(불변의) 클래스이다. 그래서 한번 생성되면 수정이 불가능 하다.&lt;/p&gt;

&lt;p&gt;다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;객체의 특성을 나열 한다.&lt;/p&gt;

&lt;h3 id=&quot;or--string-&quot;&gt;1. “” or 객체 String 만들기&lt;/h3&gt;

&lt;p&gt;String을 만들때는 두가지 방식이 존재한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;우선 차이를 설명하는 예를 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;는 Method Area에서 같은 메모리를 참조 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;는 다른 heap영역에서 다른 object이다. 다른 object는 다른 메모리 참조한다.&lt;/p&gt;

&lt;p&gt;String을 만들때 객체를 새로 만드는 것보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;으로 String을 만드는 것이 불필요한 객체를 안만들어서 더 유용하다고 한다.&lt;/p&gt;

&lt;h3 id=&quot;string-passed-by-value&quot;&gt;2. String은 passed by value&lt;/h3&gt;

&lt;p&gt;다음 예를 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 예제에서 print되는 것은 “abc”이다.&lt;/p&gt;

&lt;p&gt;이러한 이유는 Java는 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;pass by value&lt;/code&gt;를 하기 때문이다. 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeText()&lt;/code&gt;메소드를 지나면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;에 저장되었던 “abc”는 무시되고 “cd”가 새롭게 heap생성이된다. 처음에 생성되었던 a는 여전히 “abc”를 참조하고 있다. 이는 앞서 설명한 Java에서는 String이 immutable한 클래스이기 때문이다. 즉 참조에 의한 값전달(passed by reference)는 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;immutable하지 않는 String을 만들고 싶으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;다음 예는 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeText()&lt;/code&gt;메소드의 기능을 살리는 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;여기서 StringBuilder는 값이 변할 수 있다. 그리고 새로운 객체를 생성하는 것이 아니라 새로운 값을 할당한다.&lt;/p&gt;

&lt;p&gt;요약하면 Java는 값(변수?)의한 전달만 가능하다!! 참조를 통한 전달은 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;C++로 &lt;code class=&quot;highlighter-rouge&quot;&gt;passed by reference&lt;/code&gt;의 예를 보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;최종적인 x는 “cd”가 출력된다. heap에 생성된 x의 메모리주소를 참조하여 값을 변경하였다.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/&quot;&gt;programcreek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javadude.com/articles/passbyvalue.htm&quot;&gt;JavaDude.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fowler.egloos.com/1243657&quot;&gt;어제보다 나은 오늘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 10:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2017/01/05/javastring/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2017/01/05/javastring/</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>curl</title>
        <description>&lt;h1 id=&quot;curl----http-getpost-rest-api&quot;&gt;curl 설치 및 사용법 (HTTP GET/POST REST API)&lt;/h1&gt;

&lt;h3 id=&quot;section&quot;&gt;개요&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;은 command line용 data transfer tool이다. download/upload 모두 가능하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/HTTPS/FTP/LDAP/SCP/TELNET/SMTP/POP3&lt;/code&gt; 등 주요한 프로토콜을 지원하며 Linux/Unix 계열 및 Windows 등 주요한 OS 에서 구동되므로
여러 플랫폼과 OS에서 유용하게 사용할 수 있다. 또 libcurl 이라는 C 기반의 library 가 제공되므로 C/C++ 프로그램 개발시 위의 protocol 과 연계가 필요하다면 libcurl 을 사용하여 손쉽게 연계할 수 있다. 또 libcurl은 PHP, ruby, PERL 및 여러 언어에 바인딩되어 있으므로 사용하는 언어나 개발환경에 맞게 libcurl 을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;설치&lt;/h3&gt;

&lt;p&gt;Linux나 Mac OS X 에는 기본 탑재되어 있다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo brew install curl&lt;/code&gt;로 설치하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;사용법&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl [options...] &amp;lt;url&amp;gt;&lt;/code&gt;형식으로 사용하면 된다.&lt;/p&gt;

&lt;p&gt;option 처리는 GNU getopt를 사용하므로 하이픈(-)하나를 붙이는 short형식의 옵션과 하이픈두개(–)두개로 시작되는 long 형식의 options이 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;short&lt;/th&gt;
      &lt;th&gt;long&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;–verbose &lt;/td&gt;
      &lt;td&gt;동작하면서 자세한 옵션을 출력한다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;–silent&lt;/td&gt;
      &lt;td&gt;정숙 모드. 진행 내역이나 메시지등을 출력하지 않는다. -o 옵션으로 remote data 도 /dev/null 로 보내면 결과물도 출력되지 않는다&lt;/td&gt;
      &lt;td&gt;HTTP response code 만 가져오거나 할 경우 유리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o&lt;/td&gt;
      &lt;td&gt;–output FILE&lt;/td&gt;
      &lt;td&gt;curl 은 remote 에서 받아온 데이타를 기본적으로는 콘솔에 출력한다. -o 옵션 뒤에 FILE 을 적어주면 해당 FILE 로 저장한다. (download 시 유용)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-O&lt;/td&gt;
      &lt;td&gt;–remote-name&lt;/td&gt;
      &lt;td&gt;file 저장시 remote 의 file 이름으로 저장한다. -o 옵션보다 편리하다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-l&lt;/td&gt;
      &lt;td&gt;–head&lt;/td&gt;
      &lt;td&gt;HTTP header 만 보여주고 content 는 표시하지 않는다&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-L&lt;/td&gt;
      &lt;td&gt;–location&lt;/td&gt;
      &lt;td&gt;서버에서 &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_301&quot;&gt;HTTP 301 &lt;/a&gt;이나 &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_302&quot;&gt;HTTP 302&lt;/a&gt; 응답이 왔을 경우 redirection URL 로 따라간다.&lt;br /&gt;–max-redirs 뒤에 숫자로 redirection 을 몇 번 따라갈지 지정할 수 있다. 기본 값은 50이다&lt;/td&gt;
      &lt;td&gt;curl -v daum.net 을 실행하면 결과값으로 다음과 같이 HTTP 302 가 리턴된다.&lt;br /&gt;&amp;lt; HTTP/1.1 302 Object Moved&lt;br /&gt; Location: &lt;a href=&quot;http://www.daum.net/&quot;&gt;http://www.daum.net/&lt;/a&gt;&lt;br /&gt;-L 옵션을 추가하면 &lt;a href=&quot;http://www.daum.net/&quot;&gt;www.daum.net&lt;/a&gt; 으로 재접속하여 결과를 받아오게 된다.&amp;lt;/span&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-k&lt;/td&gt;
      &lt;td&gt;–insecure&lt;/td&gt;
      &lt;td&gt;https 사이트를 SSL certificate 검증없이 연결한다.&lt;/td&gt;
      &lt;td&gt;wget 의 –no-check-certificate 과 비슷한 역할 수행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-J&lt;/td&gt;
      &lt;td&gt;–remote-header-name&lt;/td&gt;
      &lt;td&gt;어떤 웹서비스는 파일 다운로드시 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html&quot;&gt;Content-Disposition Header&lt;/a&gt; 를 파싱해야 정확한 파일이름을 알 수 있을 경우가 있다. -J 옵션을 주면 헤더에 있는 파일 이름으로 저장한다.&lt;/td&gt;
      &lt;td&gt;curl 7.20 이상부터 추가된 옵션&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;–dump-header &amp;lt;file&amp;gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;file&amp;gt; 에 HTTP header 를 기록한다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;–data&lt;/td&gt;
      &lt;td&gt;HTTP Post data&lt;/td&gt;
      &lt;td&gt;FORM 을 POST 하는 HTTP나 JSON 으로 데이타를 주고받는 REST 기반의 웹서비스 디버깅시 유용한 옵션이다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-3&quot;&gt;사용예&lt;/h2&gt;

&lt;h3 id=&quot;httphttps-download&quot;&gt;HTTP/HTTPS Download&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다운로드 받은 파일을 콘솔로 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;지정한 이름으로 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o index.html http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;서버의 filename으로 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O  http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;여러 url에서 동시에 다운로드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O  http://www.gnu.org/software/bash/manual/html_node/index.html -O http://www.gnu.org/savannah-checkouts/gnu/libiconv/documentation/libiconv-1.13/iconv.1.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;이어받기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-C / --continue-at &amp;lt;offset&amp;gt;&lt;/code&gt; 
옵션을 주면 이어받기 가능 (offset에 - 를 주면 전송이후 부분부터 이어받음)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -C - -O  http://www.gnu.org/software/bash/manual/html_node/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;특정일 이전/이후 변경되었으면 받기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-z / --time-cond &amp;lt;time&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HTTP 헤더에 If-Modified-Since: 헤더를 추가하여 특정일 이후에 변경되었으면 다운로드 수행
아래 예제는 2011년 12월 21일 &lt;strong&gt;이후에&lt;/strong&gt; 변경되었으면 다운로드 수행&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -z 21-Dec-11 http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;날자앞에 - 를 추가하면 If-Unmodified-Since: 헤더를 추가하여 특정일 이전에 변경되었으면 다운로드 수행
아래 예제는 2011년 12월 21일 &lt;strong&gt;이전에&lt;/strong&gt; 변경되었으면 다운로드함 (날자에 - 추가)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -z -21-Dec-11 http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-response-code-&quot;&gt;http response code만 출력&lt;/h3&gt;

&lt;p&gt;HTTP Header 나 contents 는 빼고 &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot;&gt;HTTP Response code&lt;/a&gt; 만 출력한다. 서버의 정상 작동 여부 점검때 유용하다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -o /dev/null -w &quot;%{http_code}\n&quot; http://www.example.com/yy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP인증&lt;/h3&gt;

&lt;p&gt;id/pwd 가 필요한 사이트의 경우 -u(– user) 옵션 뒤에 userid:password 를 지정하여 인증할 수 있다&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -u userid:password http://www.example.com/user.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-header-&quot;&gt;결과값에 HTTP Header 포함&lt;/h3&gt;

&lt;p&gt;-i 옵션을 사용하면 서버의 응답에 서버가 보낸 HTTP 헤더를 추가하여 출력한다. 디버깅에 유용한다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -i https://api.github.com -u valid_username:valid_password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;httphttps-post&quot;&gt;HTTP/HTTPS POST&lt;/h3&gt;

&lt;p&gt;-X POST 옵션을 추가하거나 -d( –data) 옵션을 지정하면 기본값으로 POST 로 설정됨&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; OK &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;POST 데이타는 “param1=value1&amp;amp;param2=value2” 형식으로 전달&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d &quot;first_name=Bruce&amp;amp;last_name=Wayne&amp;amp;press=%20OK%20&quot; http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;데이타에 공백이나 기타 특수 문자가 있을 경우 URL encoding 을 해야 한다.
공백일 경우 일일이 + 로 변환해서 전송해야 하지만 최신 버전의 curl(7.18.0 이후) 은 FORM 파라미터를 URL Encoding 해주는 –data-urlencode 옵션을 사용하면 별도로 인코딩을 해주지 않아도 된다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --data-urlencode &quot;first_name=Bruce&quot; --data-urlencode &quot;last_name=Wayne&quot; --data-urlencode &quot;press= OK &quot; http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hidden field 전송시 일반 필드처럼 name=value 형식으로 전송하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;http-post-file&quot;&gt;HTTP POST File&lt;/h3&gt;

&lt;p&gt;file POST할 경우 file name 앞에 @ 를 붙여줌&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myPostfile http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-post-binary-file&quot;&gt;HTTP POST Binary File&lt;/h3&gt;

&lt;p&gt;curl 은 POST 시 데이타를 text 로 취급하므로 binary 데이타는 깨질 수 있다. 제대로 전송하려면 –data-binary 옵션을 추가해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --data-binary @myBinary.jpg http://posttestserver.com/post.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-file-upload-form&quot;&gt;HTTP File Upload Form&lt;/h3&gt;

&lt;p&gt;다음과 같은 파일 업로드 FORM이 있을 때&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enctype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'multipart/form-data'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upload.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;localfilename은 upload 할 파일명, submit은 press=OK&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --form upload=@localfilename --form press=OK http://localhost/upload.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http-header--1&quot;&gt;HTTP Header 설정&lt;/h3&gt;

&lt;p&gt;특정한 HTTP Header를 설정해서 보내야 할 경우(Ex: json data등) -H (–header) 옵션으로 헤더를 설정할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;content-type-header-&quot;&gt;Content-Type Header 설정&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;user-agent-&quot;&gt;User-Agent 설정&lt;/h4&gt;

&lt;p&gt;특정 브라우저인(Browser) 것처럼 동작하기 위해서는 -A ( –user-agent) 옵션을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;chrome-240-user-agent&quot;&gt;Chrome 24.0으로 User-Agent설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.14 (KHTML, like Gecko) Chrome/24.0.1292.0 Safari/537.14&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ie10-user-agnet&quot;&gt;IE10으로 User-Agnet설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;firefodx-290-user-agent-&quot;&gt;Firefodx 29.0으로 User-Agent 설정&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -d @myJson.js -H &quot;Content-Type: application/json&quot; --user-agent &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20120101 Firefox/29.0&quot; http://localhost:8080/jsonEcho
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;referer&quot;&gt;Referer설정&lt;/h3&gt;

&lt;p&gt;Referer 를 체크하는 사이트일 경우 -e ( –referer) 옵션으로 Referer URL 을 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --referer http://www.example.come/from  http://www.example.com/to
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아니면 -H 옵션으로 referer 헤더를 지정해도 된다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -H &quot;Referer: http://www.example.come/from&quot;  http://www.example.com/to
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssltls&quot;&gt;SSL/TLS옵션&lt;/h3&gt;

&lt;h3 id=&quot;tls-version-&quot;&gt;TLS Version 지정&lt;/h3&gt;

&lt;p&gt;SSL의 후속 버전인 TLS의 버전을 지정할 수 있다. 지정하지 않을 경우 서버와 negotiation하여 결정한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-1, –tlsv1     Use =&amp;gt; TLSv1 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.0       Use TLSv1.0 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.1       Use TLSv1.1 (SSL)&lt;/li&gt;
  &lt;li&gt;–tlsv1.2       Use TLSv1.2 (SSL)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --tlsv1.2 https://www.example.come
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssl-version-&quot;&gt;SSL Version 지정&lt;/h3&gt;

&lt;p&gt;다음 옵션으로 사용할 SSL 의 버전을 지정할 수 있다. 지정하지 않을 경우 서버와 negotiation하여 결정한다. SSL 은 오래 됐으니 SSL 보다는 TLS 를 사용하는게 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-2, –sslv2         Use SSLv2 (SSL)&lt;/li&gt;
  &lt;li&gt;-3, –sslv3         Use SSLv3 (SSL)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --sslv3 https://www.example.come
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/pages/viewpage.action?pageId=14745703#curl설치및사용법-HTTPGET/POST,RESTAPI연계등-curl로AtlassianJIRARESTAPI연계하기&quot;&gt;lesstif&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 11:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/18/curl/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/18/curl/</guid>
        
        
        <category>Etc</category>
        
      </item>
    
      <item>
        <title>GROUP_CONCAT</title>
        <description>&lt;h1 id=&quot;mysql-groupconcat-&quot;&gt;[MySQL] GROUP_CONCAT에 대해&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;은 서로 다른 결과를 한줄로 합쳐서 보여줘야 할 경우 사용하는 MySQL 명령어이다.&lt;/p&gt;

&lt;p&gt;이는 전체 결과를 서버로 들고와서 for문을 돌려 문자열을 붙여도 되지만 SELECT쿼리를 사용하여 합쳐져 있는 문자열을 받는게 더 편하다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;싼 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼집 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;이런 결과를 &lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;을 사용하면 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구,싼 가구,신혼집 가구,신혼부부 가구, 신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt;의 기본적으로 문자열 사이에 쉼표(,)가 붙게 된다. 구분자를 변경하고 싶을 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SEPARATOR '구분자'&lt;/code&gt;를 함께 사용하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEPARATOR&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구/싼 가구/신혼집 가구/신혼부부 가구/ 신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;합쳐지는 문자열에 중복되는 문자열을 제거 할때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;가구&lt;/td&gt;
      &lt;td&gt;편한가구,싼 가구,신혼집 가구,신혼부부 가구&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;문자열을 정렬하여 나타내고 싶으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;order by&lt;/code&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;MySQL에서 group by 로 문자열을 합칠땐 group_concat 을 이용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기본형 : group_concat(필드명)&lt;/li&gt;
  &lt;li&gt;구분자 변경 : group_concat(필드명 separator ‘구분자’)&lt;/li&gt;
  &lt;li&gt;중복제거 : group_concat(distinct 필드명)&lt;/li&gt;
  &lt;li&gt;문자열 정렬 : group_concat(필드명 order by 필드명)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;참고&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;AVG()&lt;/td&gt;
      &lt;td&gt;Return the average value of the argument&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_AND()&lt;/td&gt;
      &lt;td&gt;Return bitwise AND&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_OR()&lt;/td&gt;
      &lt;td&gt;Return bitwise OR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BIT_XOR()&lt;/td&gt;
      &lt;td&gt;Return bitwise XOR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;COUNT()&lt;/td&gt;
      &lt;td&gt;Return a count of the number of rows returned&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;COUNT(DISTINCT)&lt;/td&gt;
      &lt;td&gt;Return the count of a number of different values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;GROUP_CONCAT()&lt;/td&gt;
      &lt;td&gt;Return a concatenated string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MAX()&lt;/td&gt;
      &lt;td&gt;Return the maximum value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MIN()&lt;/td&gt;
      &lt;td&gt;Return the minimum value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STD()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV_POP()&lt;/td&gt;
      &lt;td&gt;Return the population standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STDDEV_SAMP()&lt;/td&gt;
      &lt;td&gt;Return the sample standard deviation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;SUM()&lt;/td&gt;
      &lt;td&gt;Return the sum&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VAR_POP()&lt;/td&gt;
      &lt;td&gt;Return the population standard variance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VAR_SAMP()&lt;/td&gt;
      &lt;td&gt;Return the sample variance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;VARIANCE()&lt;/td&gt;
      &lt;td&gt;Return the population standard variance&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;표 : &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_avg&quot;&gt;MySQL_Doc&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;tip&quot;&gt;[tip]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;오라클의 경우 mysql의 group_concat을 아래와 같이 대체하여 사용이 가능하다.&lt;/li&gt;
  &lt;li&gt;오라클 10G : WM_CONCAT()&lt;/li&gt;
  &lt;li&gt;오라클 11G : LISTAGG()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fruitdev.tistory.com/16&quot;&gt;과일가게 개발자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blackbull.tistory.com/3&quot;&gt;음머어’s 까망별&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ra2kstar.tistory.com/56&quot;&gt;초보개발자 이야기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 10:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/18/groupconcat/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/18/groupconcat/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>TRUNCATE와 DELETE</title>
        <description>&lt;h1 id=&quot;truncate--delete&quot;&gt;TRUNCATE 와 DELETE&lt;/h1&gt;

&lt;h3 id=&quot;truncate&quot;&gt;TRUNCATE&lt;/h3&gt;

&lt;p&gt;테이블의 데이터를 삭제하는 DDL명령어 이다.&lt;/p&gt;

&lt;p&gt;데이터를 삭제 방식은 talbe의 명세만 남기고 &lt;strong&gt;DROP 후 CREATE&lt;/strong&gt;한다. 즉 데이터가 존재하던 공간마저 제거하기 위한 명령어이다.&lt;/p&gt;

&lt;p&gt;이런 방식으로 테이블의 데이터를 삭제하기 때문에 수행 속도는 DELETE보다 빠르지만, 데이터 복구가 불가능하다는 제한사항이 존재한다.&lt;/p&gt;

&lt;p&gt;또 auto_increment까지 초기화 시켜준다.(5.0.13버전부터) 즉 table의 옵션을 초기상태로 돌려준다.&lt;/p&gt;

&lt;p&gt;삭제하다가 외부키와의 의존관계 때문에 삭제할 수 없다는 메시지가 나오면 다음과 같이하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET foreign_key_checks = 0; 
truncate TABLE_NAME;
SET foreign_key_checks = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;0은 해제 1은 다시 설정을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;테이블의 데이터를 삭제하기 위한 명령어이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt;절을 통해 조건을 부여 할 수 있다.&lt;/p&gt;

&lt;p&gt;데이터 삭제 방식은 한줄씩 순차적으로 삭제한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 09:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/12/17/truncateanddelete/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/12/17/truncateanddelete/</guid>
        
        
        <category>MYSQL</category>
        
      </item>
    
      <item>
        <title>Flask + Nginx 설정</title>
        <description>&lt;h1 id=&quot;flask--nginx--&quot;&gt;Flask + Nginx 설치 방법&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;환경&lt;/h2&gt;
&lt;p&gt;데비안 계열 중 우분투 서버&lt;br /&gt;
여기서 접근하는 모든 디렉토리는 권한이 있어야함.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;설치&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install nginx # Nginx
apt-get install uwsgi # uWSGI
apt-get install uwsgi-plugin-python # python과 uWSGI를 연결하는 플러그인
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nginx-&quot;&gt;Nginx 세팅&lt;/h2&gt;
&lt;p&gt;디폴트 파일로 설정하는 방법
&lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/nginx/sites-available/default&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
       listen       80; # 연결할 포트
       server_name  0.0.0.0;
       location / { try_files $uri @app; }
       location @app {
           include uwsgi_params;
           uwsgi_pass unix:socket파일이 위치할 경로;
           # ex) /home/server/uwsgi.sock
       }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uwsgi-&quot;&gt;uWSGI 세팅&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi /etc/uwsgi/apps-available/uwsgi.ini&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[uwsgi]
chdir = 프로젝트 경로
uid = 실행할계정
gid = 실행할계정
chmod-socket = 666
socket = socket파일이 위치할 경로
module = 모듈이름(실행할 파일 이름)
callable = 연결될 Flask 모듈이름
virtualenv = python 가상 환경 경로(virtualenv)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참고로 프로젝트 경로는 root를 포함하지 않는 것이 좋다 (권한 문제 때문에)&lt;/p&gt;

&lt;p&gt;허용하는 파일로 등록하기위해 apps-enabled 디렉토리에 link함
&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /etc/uwsgi/apps-available/uwsgi.ini /etc/uwsgi/apps-enabled/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;실행 방법&lt;/h2&gt;
&lt;p&gt;세팅 후 재시작을 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx restart
sudo service uwsgi restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;설정한 uwsgi에 맞춰서 실행
&lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi /etc/uwsgi/apps-available/uwsgi.ini &amp;amp;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 15:00:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/27/flasnginxsetting/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/27/flasnginxsetting/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Real-time web tec List</title>
        <description>&lt;h1 id=&quot;real-time-web-tec-list&quot;&gt;Real-time web Tec List&lt;/h1&gt;

&lt;p&gt;You can find a comprehensive and updated list of real-time solutions that can be considered alternatives to pusher in this Real-Time Web Technologies Guide.&lt;/p&gt;

&lt;h3 id=&quot;hosted&quot;&gt;Hosted&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ably: https://www.ably.io   &lt;strong&gt;(완전 편리함!!)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Fanout: http://fanout.io/&lt;/li&gt;
  &lt;li&gt;Firebase https://www.firebase.com&lt;/li&gt;
  &lt;li&gt;Gamooga: http://www.gamooga.com/&lt;/li&gt;
  &lt;li&gt;Google App Engine with Channels API: http://code.google.com/appengine…&lt;/li&gt;
  &lt;li&gt;Google Drive Real Time: https://developers.google.com/dr…&lt;/li&gt;
  &lt;li&gt;Hydna: https://www.hydna.com/&lt;/li&gt;
  &lt;li&gt;ScaleDrone https://www.scaledrone.com&lt;/li&gt;
  &lt;li&gt;Baasil https://baasil.io&lt;/li&gt;
  &lt;li&gt;PubNub: http://pubnub.com&lt;/li&gt;
  &lt;li&gt;Reappt: Data-Efficient Realtime Messaging&lt;/li&gt;
  &lt;li&gt;Simperium: Simperium&lt;/li&gt;
  &lt;li&gt;Tambur: https://www.tambur.io/&lt;/li&gt;
  &lt;li&gt;WebSync on-demand: http://www.frozenmountain.com/we…&lt;/li&gt;
  &lt;li&gt;Xtremepush: Xtremepush - Mobile Marketing Automation Software&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;self-hosted&quot;&gt;Self Hosted&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://github.com/Atmosphere : http://async-io.org/&lt;/li&gt;
  &lt;li&gt;http://faye.jcoglan.com/&lt;/li&gt;
  &lt;li&gt;http://firehose.io/&lt;/li&gt;
  &lt;li&gt;Jetty: http://blogs.webtide.com/gregw/e…&lt;/li&gt;
  &lt;li&gt;Kaazing: http://kaazing.com/&lt;/li&gt;
  &lt;li&gt;Lightstreamer: http://lightstreamer.com&lt;/li&gt;
  &lt;li&gt;Diffusion - http://www.pushtechnology.com&lt;/li&gt;
  &lt;li&gt;http://pusheo.com&lt;/li&gt;
  &lt;li&gt;http://code.google.com/p/pywebso…&lt;/li&gt;
  &lt;li&gt;Ruby EventMachine WebSocket server: https://github.com/igrigorik/em-…&lt;/li&gt;
  &lt;li&gt;SignalR (.NET) https://github.com/SignalR/SignalR&lt;/li&gt;
  &lt;li&gt;Slanger. Open source reimplementation of Pusher. Compatible with Pusher libraries: https://github.com/stevegraham/s…&lt;/li&gt;
  &lt;li&gt;http://socky.org/&lt;/li&gt;
  &lt;li&gt;http://socket.io/&lt;/li&gt;
  &lt;li&gt;http://sockjs.org/&lt;/li&gt;
  &lt;li&gt;http://socketcluster.io/&lt;/li&gt;
  &lt;li&gt;Thunderpush: https://github.com/thunderpush/t…&lt;/li&gt;
  &lt;li&gt;https://www.meteor.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pushpin&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MigratoryData: http://migratorydata.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-alternatives-to-pusher-com&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Nov 2016 08:04:00 +0900</pubDate>
        <link>http://joswlv.github.io/2016/11/20/realtimeweb/</link>
        <guid isPermaLink="true">http://joswlv.github.io/2016/11/20/realtimeweb/</guid>
        
        
        <category>Etc</category>
        
      </item>
    
  </channel>
</rss>
